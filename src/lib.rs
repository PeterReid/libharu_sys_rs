#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

extern crate libc;

/* automatically generated by rust-bindgen */

pub type HPDF_INT = ::libc::c_int;
pub type HPDF_UINT = ::libc::c_uint;
pub type HPDF_INT32 = ::libc::c_int;
pub type HPDF_UINT32 = ::libc::c_uint;
pub type HPDF_INT16 = ::libc::c_short;
pub type HPDF_UINT16 = ::libc::c_ushort;
pub type HPDF_INT8 = ::libc::c_char;
pub type HPDF_UINT8 = ::libc::c_uchar;
pub type HPDF_BYTE = ::libc::c_uchar;
pub type HPDF_REAL = ::libc::c_float;
pub type HPDF_DOUBLE = ::libc::c_double;
pub type HPDF_BOOL = ::libc::c_int;
pub type HPDF_STATUS = ::libc::c_ulong;
pub type HPDF_CID = HPDF_UINT16;
pub type HPDF_UNICODE = HPDF_UINT16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Point {
    pub x: HPDF_REAL,
    pub y: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_Point {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Point {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Point = Struct__HPDF_Point;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Rect {
    pub left: HPDF_REAL,
    pub bottom: HPDF_REAL,
    pub right: HPDF_REAL,
    pub top: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_Rect {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Rect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Rect = Struct__HPDF_Rect;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Point3D {
    pub x: HPDF_REAL,
    pub y: HPDF_REAL,
    pub z: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_Point3D {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Point3D {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Point3D = Struct__HPDF_Point3D;
pub type HPDF_Box = Struct__HPDF_Rect;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Date {
    pub year: HPDF_INT,
    pub month: HPDF_INT,
    pub day: HPDF_INT,
    pub hour: HPDF_INT,
    pub minutes: HPDF_INT,
    pub seconds: HPDF_INT,
    pub ind: ::libc::c_char,
    pub off_hour: HPDF_INT,
    pub off_minutes: HPDF_INT,
}
impl ::std::clone::Clone for Struct__HPDF_Date {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Date {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Date = Struct__HPDF_Date;
pub type Enum__HPDF_InfoType = ::libc::c_uint;
pub const HPDF_INFO_CREATION_DATE: ::libc::c_uint = 0;
pub const HPDF_INFO_MOD_DATE: ::libc::c_uint = 1;
pub const HPDF_INFO_AUTHOR: ::libc::c_uint = 2;
pub const HPDF_INFO_CREATOR: ::libc::c_uint = 3;
pub const HPDF_INFO_PRODUCER: ::libc::c_uint = 4;
pub const HPDF_INFO_TITLE: ::libc::c_uint = 5;
pub const HPDF_INFO_SUBJECT: ::libc::c_uint = 6;
pub const HPDF_INFO_KEYWORDS: ::libc::c_uint = 7;
pub const HPDF_INFO_TRAPPED: ::libc::c_uint = 8;
pub const HPDF_INFO_GTS_PDFX: ::libc::c_uint = 9;
pub const HPDF_INFO_EOF: ::libc::c_uint = 10;
pub type HPDF_InfoType = Enum__HPDF_InfoType;
pub type Enum__HPDF_PDFA_TYPE = ::libc::c_uint;
pub const HPDF_PDFA_1A: ::libc::c_uint = 0;
pub const HPDF_PDFA_1B: ::libc::c_uint = 1;
pub type HPDF_PDFAType = Enum__HPDF_PDFA_TYPE;
pub type Enum__HPDF_PdfVer = ::libc::c_uint;
pub const HPDF_VER_12: ::libc::c_uint = 0;
pub const HPDF_VER_13: ::libc::c_uint = 1;
pub const HPDF_VER_14: ::libc::c_uint = 2;
pub const HPDF_VER_15: ::libc::c_uint = 3;
pub const HPDF_VER_16: ::libc::c_uint = 4;
pub const HPDF_VER_17: ::libc::c_uint = 5;
pub const HPDF_VER_EOF: ::libc::c_uint = 6;
pub type HPDF_PDFVer = Enum__HPDF_PdfVer;
pub type Enum__HPDF_EncryptMode = ::libc::c_uint;
pub const HPDF_ENCRYPT_R2: ::libc::c_uint = 2;
pub const HPDF_ENCRYPT_R3: ::libc::c_uint = 3;
pub type HPDF_EncryptMode = Enum__HPDF_EncryptMode;
pub type HPDF_Error_Handler =
    ::std::option::Option<extern "C" fn(error_no: HPDF_STATUS,
                                        detail_no: HPDF_STATUS,
                                        user_data: *mut ::libc::c_void)
                              -> ()>;
pub type HPDF_Alloc_Func =
    ::std::option::Option<extern "C" fn(size: HPDF_UINT)
                              -> *mut ::libc::c_void>;
pub type HPDF_Free_Func =
    ::std::option::Option<extern "C" fn(aptr: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TextWidth {
    pub numchars: HPDF_UINT,
    pub numwords: HPDF_UINT,
    pub width: HPDF_UINT,
    pub numspace: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_TextWidth {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TextWidth {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TextWidth = Struct__HPDF_TextWidth;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_DashMode {
    pub ptn: [HPDF_UINT16; 8usize],
    pub num_ptn: HPDF_UINT,
    pub phase: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_DashMode {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_DashMode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_DashMode = Struct__HPDF_DashMode;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TransMatrix {
    pub a: HPDF_REAL,
    pub b: HPDF_REAL,
    pub c: HPDF_REAL,
    pub d: HPDF_REAL,
    pub x: HPDF_REAL,
    pub y: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_TransMatrix {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TransMatrix {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TransMatrix = Struct__HPDF_TransMatrix;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_3DMatrix {
    pub a: HPDF_REAL,
    pub b: HPDF_REAL,
    pub c: HPDF_REAL,
    pub d: HPDF_REAL,
    pub e: HPDF_REAL,
    pub f: HPDF_REAL,
    pub g: HPDF_REAL,
    pub h: HPDF_REAL,
    pub i: HPDF_REAL,
    pub tx: HPDF_REAL,
    pub ty: HPDF_REAL,
    pub tz: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_3DMatrix {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_3DMatrix {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_3DMatrix = Struct__HPDF_3DMatrix;
pub type Enum__HPDF_ColorSpace = ::libc::c_uint;
pub const HPDF_CS_DEVICE_GRAY: ::libc::c_uint = 0;
pub const HPDF_CS_DEVICE_RGB: ::libc::c_uint = 1;
pub const HPDF_CS_DEVICE_CMYK: ::libc::c_uint = 2;
pub const HPDF_CS_CAL_GRAY: ::libc::c_uint = 3;
pub const HPDF_CS_CAL_RGB: ::libc::c_uint = 4;
pub const HPDF_CS_LAB: ::libc::c_uint = 5;
pub const HPDF_CS_ICC_BASED: ::libc::c_uint = 6;
pub const HPDF_CS_SEPARATION: ::libc::c_uint = 7;
pub const HPDF_CS_DEVICE_N: ::libc::c_uint = 8;
pub const HPDF_CS_INDEXED: ::libc::c_uint = 9;
pub const HPDF_CS_PATTERN: ::libc::c_uint = 10;
pub const HPDF_CS_EOF: ::libc::c_uint = 11;
pub type HPDF_ColorSpace = Enum__HPDF_ColorSpace;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_RGBColor {
    pub r: HPDF_REAL,
    pub g: HPDF_REAL,
    pub b: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_RGBColor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_RGBColor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_RGBColor = Struct__HPDF_RGBColor;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CMYKColor {
    pub c: HPDF_REAL,
    pub m: HPDF_REAL,
    pub y: HPDF_REAL,
    pub k: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_CMYKColor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CMYKColor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CMYKColor = Struct__HPDF_CMYKColor;
pub type Enum__HPDF_LineCap = ::libc::c_uint;
pub const HPDF_BUTT_END: ::libc::c_uint = 0;
pub const HPDF_ROUND_END: ::libc::c_uint = 1;
pub const HPDF_PROJECTING_SCUARE_END: ::libc::c_uint = 2;
pub const HPDF_LINECAP_EOF: ::libc::c_uint = 3;
pub type HPDF_LineCap = Enum__HPDF_LineCap;
pub type Enum__HPDF_LineJoin = ::libc::c_uint;
pub const HPDF_MITER_JOIN: ::libc::c_uint = 0;
pub const HPDF_ROUND_JOIN: ::libc::c_uint = 1;
pub const HPDF_BEVEL_JOIN: ::libc::c_uint = 2;
pub const HPDF_LINEJOIN_EOF: ::libc::c_uint = 3;
pub type HPDF_LineJoin = Enum__HPDF_LineJoin;
pub type Enum__HPDF_TextRenderingMode = ::libc::c_uint;
pub const HPDF_FILL: ::libc::c_uint = 0;
pub const HPDF_STROKE: ::libc::c_uint = 1;
pub const HPDF_FILL_THEN_STROKE: ::libc::c_uint = 2;
pub const HPDF_INVISIBLE: ::libc::c_uint = 3;
pub const HPDF_FILL_CLIPPING: ::libc::c_uint = 4;
pub const HPDF_STROKE_CLIPPING: ::libc::c_uint = 5;
pub const HPDF_FILL_STROKE_CLIPPING: ::libc::c_uint = 6;
pub const HPDF_CLIPPING: ::libc::c_uint = 7;
pub const HPDF_RENDERING_MODE_EOF: ::libc::c_uint = 8;
pub type HPDF_TextRenderingMode = Enum__HPDF_TextRenderingMode;
pub type Enum__HPDF_WritingMode = ::libc::c_uint;
pub const HPDF_WMODE_HORIZONTAL: ::libc::c_uint = 0;
pub const HPDF_WMODE_VERTICAL: ::libc::c_uint = 1;
pub const HPDF_WMODE_EOF: ::libc::c_uint = 2;
pub type HPDF_WritingMode = Enum__HPDF_WritingMode;
pub type Enum__HPDF_PageLayout = ::libc::c_uint;
pub const HPDF_PAGE_LAYOUT_SINGLE: ::libc::c_uint = 0;
pub const HPDF_PAGE_LAYOUT_ONE_COLUMN: ::libc::c_uint = 1;
pub const HPDF_PAGE_LAYOUT_TWO_COLUMN_LEFT: ::libc::c_uint = 2;
pub const HPDF_PAGE_LAYOUT_TWO_COLUMN_RIGHT: ::libc::c_uint = 3;
pub const HPDF_PAGE_LAYOUT_TWO_PAGE_LEFT: ::libc::c_uint = 4;
pub const HPDF_PAGE_LAYOUT_TWO_PAGE_RIGHT: ::libc::c_uint = 5;
pub const HPDF_PAGE_LAYOUT_EOF: ::libc::c_uint = 6;
pub type HPDF_PageLayout = Enum__HPDF_PageLayout;
pub type Enum__HPDF_PageMode = ::libc::c_uint;
pub const HPDF_PAGE_MODE_USE_NONE: ::libc::c_uint = 0;
pub const HPDF_PAGE_MODE_USE_OUTLINE: ::libc::c_uint = 1;
pub const HPDF_PAGE_MODE_USE_THUMBS: ::libc::c_uint = 2;
pub const HPDF_PAGE_MODE_FULL_SCREEN: ::libc::c_uint = 3;
pub const HPDF_PAGE_MODE_EOF: ::libc::c_uint = 4;
pub type HPDF_PageMode = Enum__HPDF_PageMode;
pub type Enum__HPDF_PageNumStyle = ::libc::c_uint;
pub const HPDF_PAGE_NUM_STYLE_DECIMAL: ::libc::c_uint = 0;
pub const HPDF_PAGE_NUM_STYLE_UPPER_ROMAN: ::libc::c_uint = 1;
pub const HPDF_PAGE_NUM_STYLE_LOWER_ROMAN: ::libc::c_uint = 2;
pub const HPDF_PAGE_NUM_STYLE_UPPER_LETTERS: ::libc::c_uint = 3;
pub const HPDF_PAGE_NUM_STYLE_LOWER_LETTERS: ::libc::c_uint = 4;
pub const HPDF_PAGE_NUM_STYLE_EOF: ::libc::c_uint = 5;
pub type HPDF_PageNumStyle = Enum__HPDF_PageNumStyle;
pub type Enum__HPDF_DestinationType = ::libc::c_uint;
pub const HPDF_XYZ: ::libc::c_uint = 0;
pub const HPDF_FIT: ::libc::c_uint = 1;
pub const HPDF_FIT_H: ::libc::c_uint = 2;
pub const HPDF_FIT_V: ::libc::c_uint = 3;
pub const HPDF_FIT_R: ::libc::c_uint = 4;
pub const HPDF_FIT_B: ::libc::c_uint = 5;
pub const HPDF_FIT_BH: ::libc::c_uint = 6;
pub const HPDF_FIT_BV: ::libc::c_uint = 7;
pub const HPDF_DST_EOF: ::libc::c_uint = 8;
pub type HPDF_DestinationType = Enum__HPDF_DestinationType;
pub type Enum__HPDF_AnnotType = ::libc::c_uint;
pub const HPDF_ANNOT_TEXT_NOTES: ::libc::c_uint = 0;
pub const HPDF_ANNOT_LINK: ::libc::c_uint = 1;
pub const HPDF_ANNOT_SOUND: ::libc::c_uint = 2;
pub const HPDF_ANNOT_FREE_TEXT: ::libc::c_uint = 3;
pub const HPDF_ANNOT_STAMP: ::libc::c_uint = 4;
pub const HPDF_ANNOT_SQUARE: ::libc::c_uint = 5;
pub const HPDF_ANNOT_CIRCLE: ::libc::c_uint = 6;
pub const HPDF_ANNOT_STRIKE_OUT: ::libc::c_uint = 7;
pub const HPDF_ANNOT_HIGHTLIGHT: ::libc::c_uint = 8;
pub const HPDF_ANNOT_UNDERLINE: ::libc::c_uint = 9;
pub const HPDF_ANNOT_INK: ::libc::c_uint = 10;
pub const HPDF_ANNOT_FILE_ATTACHMENT: ::libc::c_uint = 11;
pub const HPDF_ANNOT_POPUP: ::libc::c_uint = 12;
pub const HPDF_ANNOT_3D: ::libc::c_uint = 13;
pub const HPDF_ANNOT_SQUIGGLY: ::libc::c_uint = 14;
pub const HPDF_ANNOT_LINE: ::libc::c_uint = 15;
pub const HPDF_ANNOT_PROJECTION: ::libc::c_uint = 16;
pub const HPDF_ANNOT_WIDGET: ::libc::c_uint = 17;
pub type HPDF_AnnotType = Enum__HPDF_AnnotType;
pub type Enum__HPDF_AnnotFlgs = ::libc::c_uint;
pub const HPDF_ANNOT_INVISIBLE: ::libc::c_uint = 0;
pub const HPDF_ANNOT_HIDDEN: ::libc::c_uint = 1;
pub const HPDF_ANNOT_PRINT: ::libc::c_uint = 2;
pub const HPDF_ANNOT_NOZOOM: ::libc::c_uint = 3;
pub const HPDF_ANNOT_NOROTATE: ::libc::c_uint = 4;
pub const HPDF_ANNOT_NOVIEW: ::libc::c_uint = 5;
pub const HPDF_ANNOT_READONLY: ::libc::c_uint = 6;
pub type HPDF_AnnotFlgs = Enum__HPDF_AnnotFlgs;
pub type Enum__HPDF_AnnotHighlightMode = ::libc::c_uint;
pub const HPDF_ANNOT_NO_HIGHTLIGHT: ::libc::c_uint = 0;
pub const HPDF_ANNOT_INVERT_BOX: ::libc::c_uint = 1;
pub const HPDF_ANNOT_INVERT_BORDER: ::libc::c_uint = 2;
pub const HPDF_ANNOT_DOWN_APPEARANCE: ::libc::c_uint = 3;
pub const HPDF_ANNOT_HIGHTLIGHT_MODE_EOF: ::libc::c_uint = 4;
pub type HPDF_AnnotHighlightMode = Enum__HPDF_AnnotHighlightMode;
pub type Enum__HPDF_AnnotIcon = ::libc::c_uint;
pub const HPDF_ANNOT_ICON_COMMENT: ::libc::c_uint = 0;
pub const HPDF_ANNOT_ICON_KEY: ::libc::c_uint = 1;
pub const HPDF_ANNOT_ICON_NOTE: ::libc::c_uint = 2;
pub const HPDF_ANNOT_ICON_HELP: ::libc::c_uint = 3;
pub const HPDF_ANNOT_ICON_NEW_PARAGRAPH: ::libc::c_uint = 4;
pub const HPDF_ANNOT_ICON_PARAGRAPH: ::libc::c_uint = 5;
pub const HPDF_ANNOT_ICON_INSERT: ::libc::c_uint = 6;
pub const HPDF_ANNOT_ICON_EOF: ::libc::c_uint = 7;
pub type HPDF_AnnotIcon = Enum__HPDF_AnnotIcon;
pub type Enum__HPDF_AnnotIntent = ::libc::c_uint;
pub const HPDF_ANNOT_INTENT_FREETEXTCALLOUT: ::libc::c_uint = 0;
pub const HPDF_ANNOT_INTENT_FREETEXTTYPEWRITER: ::libc::c_uint = 1;
pub const HPDF_ANNOT_INTENT_LINEARROW: ::libc::c_uint = 2;
pub const HPDF_ANNOT_INTENT_LINEDIMENSION: ::libc::c_uint = 3;
pub const HPDF_ANNOT_INTENT_POLYGONCLOUD: ::libc::c_uint = 4;
pub const HPDF_ANNOT_INTENT_POLYLINEDIMENSION: ::libc::c_uint = 5;
pub const HPDF_ANNOT_INTENT_POLYGONDIMENSION: ::libc::c_uint = 6;
pub type HPDF_AnnotIntent = Enum__HPDF_AnnotIntent;
pub type Enum__HPDF_LineAnnotEndingStyle = ::libc::c_uint;
pub const HPDF_LINE_ANNOT_NONE: ::libc::c_uint = 0;
pub const HPDF_LINE_ANNOT_SQUARE: ::libc::c_uint = 1;
pub const HPDF_LINE_ANNOT_CIRCLE: ::libc::c_uint = 2;
pub const HPDF_LINE_ANNOT_DIAMOND: ::libc::c_uint = 3;
pub const HPDF_LINE_ANNOT_OPENARROW: ::libc::c_uint = 4;
pub const HPDF_LINE_ANNOT_CLOSEDARROW: ::libc::c_uint = 5;
pub const HPDF_LINE_ANNOT_BUTT: ::libc::c_uint = 6;
pub const HPDF_LINE_ANNOT_ROPENARROW: ::libc::c_uint = 7;
pub const HPDF_LINE_ANNOT_RCLOSEDARROW: ::libc::c_uint = 8;
pub const HPDF_LINE_ANNOT_SLASH: ::libc::c_uint = 9;
pub type HPDF_LineAnnotEndingStyle = Enum__HPDF_LineAnnotEndingStyle;
pub type Enum__HPDF_LineAnnotCapPosition = ::libc::c_uint;
pub const HPDF_LINE_ANNOT_CAP_INLINE: ::libc::c_uint = 0;
pub const HPDF_LINE_ANNOT_CAP_TOP: ::libc::c_uint = 1;
pub type HPDF_LineAnnotCapPosition = Enum__HPDF_LineAnnotCapPosition;
pub type Enum__HPDF_StampAnnotName = ::libc::c_uint;
pub const HPDF_STAMP_ANNOT_APPROVED: ::libc::c_uint = 0;
pub const HPDF_STAMP_ANNOT_EXPERIMENTAL: ::libc::c_uint = 1;
pub const HPDF_STAMP_ANNOT_NOTAPPROVED: ::libc::c_uint = 2;
pub const HPDF_STAMP_ANNOT_ASIS: ::libc::c_uint = 3;
pub const HPDF_STAMP_ANNOT_EXPIRED: ::libc::c_uint = 4;
pub const HPDF_STAMP_ANNOT_NOTFORPUBLICRELEASE: ::libc::c_uint = 5;
pub const HPDF_STAMP_ANNOT_CONFIDENTIAL: ::libc::c_uint = 6;
pub const HPDF_STAMP_ANNOT_FINAL: ::libc::c_uint = 7;
pub const HPDF_STAMP_ANNOT_SOLD: ::libc::c_uint = 8;
pub const HPDF_STAMP_ANNOT_DEPARTMENTAL: ::libc::c_uint = 9;
pub const HPDF_STAMP_ANNOT_FORCOMMENT: ::libc::c_uint = 10;
pub const HPDF_STAMP_ANNOT_TOPSECRET: ::libc::c_uint = 11;
pub const HPDF_STAMP_ANNOT_DRAFT: ::libc::c_uint = 12;
pub const HPDF_STAMP_ANNOT_FORPUBLICRELEASE: ::libc::c_uint = 13;
pub type HPDF_StampAnnotName = Enum__HPDF_StampAnnotName;
pub type Enum__HPDF_BSSubtype = ::libc::c_uint;
pub const HPDF_BS_SOLID: ::libc::c_uint = 0;
pub const HPDF_BS_DASHED: ::libc::c_uint = 1;
pub const HPDF_BS_BEVELED: ::libc::c_uint = 2;
pub const HPDF_BS_INSET: ::libc::c_uint = 3;
pub const HPDF_BS_UNDERLINED: ::libc::c_uint = 4;
pub type HPDF_BSSubtype = Enum__HPDF_BSSubtype;
pub type Enum__HPDF_BlendMode = ::libc::c_uint;
pub const HPDF_BM_NORMAL: ::libc::c_uint = 0;
pub const HPDF_BM_MULTIPLY: ::libc::c_uint = 1;
pub const HPDF_BM_SCREEN: ::libc::c_uint = 2;
pub const HPDF_BM_OVERLAY: ::libc::c_uint = 3;
pub const HPDF_BM_DARKEN: ::libc::c_uint = 4;
pub const HPDF_BM_LIGHTEN: ::libc::c_uint = 5;
pub const HPDF_BM_COLOR_DODGE: ::libc::c_uint = 6;
pub const HPDF_BM_COLOR_BUM: ::libc::c_uint = 7;
pub const HPDF_BM_HARD_LIGHT: ::libc::c_uint = 8;
pub const HPDF_BM_SOFT_LIGHT: ::libc::c_uint = 9;
pub const HPDF_BM_DIFFERENCE: ::libc::c_uint = 10;
pub const HPDF_BM_EXCLUSHON: ::libc::c_uint = 11;
pub const HPDF_BM_EOF: ::libc::c_uint = 12;
pub type HPDF_BlendMode = Enum__HPDF_BlendMode;
pub type Enum__HPDF_TransitionStyle = ::libc::c_uint;
pub const HPDF_TS_WIPE_RIGHT: ::libc::c_uint = 0;
pub const HPDF_TS_WIPE_UP: ::libc::c_uint = 1;
pub const HPDF_TS_WIPE_LEFT: ::libc::c_uint = 2;
pub const HPDF_TS_WIPE_DOWN: ::libc::c_uint = 3;
pub const HPDF_TS_BARN_DOORS_HORIZONTAL_OUT: ::libc::c_uint = 4;
pub const HPDF_TS_BARN_DOORS_HORIZONTAL_IN: ::libc::c_uint = 5;
pub const HPDF_TS_BARN_DOORS_VERTICAL_OUT: ::libc::c_uint = 6;
pub const HPDF_TS_BARN_DOORS_VERTICAL_IN: ::libc::c_uint = 7;
pub const HPDF_TS_BOX_OUT: ::libc::c_uint = 8;
pub const HPDF_TS_BOX_IN: ::libc::c_uint = 9;
pub const HPDF_TS_BLINDS_HORIZONTAL: ::libc::c_uint = 10;
pub const HPDF_TS_BLINDS_VERTICAL: ::libc::c_uint = 11;
pub const HPDF_TS_DISSOLVE: ::libc::c_uint = 12;
pub const HPDF_TS_GLITTER_RIGHT: ::libc::c_uint = 13;
pub const HPDF_TS_GLITTER_DOWN: ::libc::c_uint = 14;
pub const HPDF_TS_GLITTER_TOP_LEFT_TO_BOTTOM_RIGHT: ::libc::c_uint = 15;
pub const HPDF_TS_REPLACE: ::libc::c_uint = 16;
pub const HPDF_TS_EOF: ::libc::c_uint = 17;
pub type HPDF_TransitionStyle = Enum__HPDF_TransitionStyle;
pub type Enum__HPDF_PageSizes = ::libc::c_uint;
pub const HPDF_PAGE_SIZE_LETTER: ::libc::c_uint = 0;
pub const HPDF_PAGE_SIZE_LEGAL: ::libc::c_uint = 1;
pub const HPDF_PAGE_SIZE_A3: ::libc::c_uint = 2;
pub const HPDF_PAGE_SIZE_A4: ::libc::c_uint = 3;
pub const HPDF_PAGE_SIZE_A5: ::libc::c_uint = 4;
pub const HPDF_PAGE_SIZE_B4: ::libc::c_uint = 5;
pub const HPDF_PAGE_SIZE_B5: ::libc::c_uint = 6;
pub const HPDF_PAGE_SIZE_EXECUTIVE: ::libc::c_uint = 7;
pub const HPDF_PAGE_SIZE_US4x6: ::libc::c_uint = 8;
pub const HPDF_PAGE_SIZE_US4x8: ::libc::c_uint = 9;
pub const HPDF_PAGE_SIZE_US5x7: ::libc::c_uint = 10;
pub const HPDF_PAGE_SIZE_COMM10: ::libc::c_uint = 11;
pub const HPDF_PAGE_SIZE_EOF: ::libc::c_uint = 12;
pub type HPDF_PageSizes = Enum__HPDF_PageSizes;
pub type Enum__HPDF_PageDirection = ::libc::c_uint;
pub const HPDF_PAGE_PORTRAIT: ::libc::c_uint = 0;
pub const HPDF_PAGE_LANDSCAPE: ::libc::c_uint = 1;
pub type HPDF_PageDirection = Enum__HPDF_PageDirection;
pub type Enum__HPDF_EncoderType = ::libc::c_uint;
pub const HPDF_ENCODER_TYPE_SINGLE_BYTE: ::libc::c_uint = 0;
pub const HPDF_ENCODER_TYPE_DOUBLE_BYTE: ::libc::c_uint = 1;
pub const HPDF_ENCODER_TYPE_UNINITIALIZED: ::libc::c_uint = 2;
pub const HPDF_ENCODER_UNKNOWN: ::libc::c_uint = 3;
pub type HPDF_EncoderType = Enum__HPDF_EncoderType;
pub type Enum__HPDF_ByteType = ::libc::c_uint;
pub const HPDF_BYTE_TYPE_SINGLE: ::libc::c_uint = 0;
pub const HPDF_BYTE_TYPE_LEAD: ::libc::c_uint = 1;
pub const HPDF_BYTE_TYPE_TRIAL: ::libc::c_uint = 2;
pub const HPDF_BYTE_TYPE_UNKNOWN: ::libc::c_uint = 3;
pub type HPDF_ByteType = Enum__HPDF_ByteType;
pub type Enum__HPDF_TextAlignment = ::libc::c_uint;
pub const HPDF_TALIGN_LEFT: ::libc::c_uint = 0;
pub const HPDF_TALIGN_RIGHT: ::libc::c_uint = 1;
pub const HPDF_TALIGN_CENTER: ::libc::c_uint = 2;
pub const HPDF_TALIGN_JUSTIFY: ::libc::c_uint = 3;
pub type HPDF_TextAlignment = Enum__HPDF_TextAlignment;
pub type Enum__HPDF_NameDictKey = ::libc::c_uint;
pub const HPDF_NAME_EMBEDDED_FILES: ::libc::c_uint = 0;
pub const HPDF_NAME_EOF: ::libc::c_uint = 1;
pub type HPDF_NameDictKey = Enum__HPDF_NameDictKey;
pub type HPDF_Error = *mut Struct__HPDF_Error_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Error_Rec {
    pub error_no: HPDF_STATUS,
    pub detail_no: HPDF_STATUS,
    pub error_fn: HPDF_Error_Handler,
    pub user_data: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Error_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Error_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Error_Rec = Struct__HPDF_Error_Rec;
pub type HPDF_MPool_Node = *mut Struct__HPDF_MPool_Node_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_MPool_Node_Rec {
    pub buf: *mut HPDF_BYTE,
    pub size: HPDF_UINT,
    pub used_size: HPDF_UINT,
    pub next_node: HPDF_MPool_Node,
}
impl ::std::clone::Clone for Struct__HPDF_MPool_Node_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_MPool_Node_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_MPool_Node_Rec = Struct__HPDF_MPool_Node_Rec;
pub type HPDF_MMgr = *mut Struct__HPDF_MMgr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_MMgr_Rec {
    pub error: HPDF_Error,
    pub alloc_fn: HPDF_Alloc_Func,
    pub free_fn: HPDF_Free_Func,
    pub mpool: HPDF_MPool_Node,
    pub buf_size: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_MMgr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_MMgr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_MMgr_Rec = Struct__HPDF_MMgr_Rec;
pub type HPDF_List = *mut Struct__HPDF_List_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_List_Rec {
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub block_siz: HPDF_UINT,
    pub items_per_block: HPDF_UINT,
    pub count: HPDF_UINT,
    pub obj: *mut *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_List_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_List_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_List_Rec = Struct__HPDF_List_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HPDF_MD5Context {
    pub buf: [HPDF_UINT32; 4usize],
    pub bits: [HPDF_UINT32; 2usize],
    pub _in: [HPDF_BYTE; 64usize],
}
impl ::std::clone::Clone for Struct_HPDF_MD5Context {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HPDF_MD5Context {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_MD5_CTX = Struct_HPDF_MD5Context;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_ARC4_Ctx_Rec {
    pub idx1: HPDF_BYTE,
    pub idx2: HPDF_BYTE,
    pub state: [HPDF_BYTE; 256usize],
}
impl ::std::clone::Clone for Struct__HPDF_ARC4_Ctx_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_ARC4_Ctx_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_ARC4_Ctx_Rec = Struct__HPDF_ARC4_Ctx_Rec;
pub type HPDF_Encrypt = *mut Struct__HPDF_Encrypt_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Encrypt_Rec {
    pub mode: HPDF_EncryptMode,
    pub key_len: HPDF_UINT,
    pub owner_passwd: [HPDF_BYTE; 32usize],
    pub user_passwd: [HPDF_BYTE; 32usize],
    pub owner_key: [HPDF_BYTE; 32usize],
    pub user_key: [HPDF_BYTE; 32usize],
    pub permission: HPDF_INT,
    pub encrypt_id: [HPDF_BYTE; 16usize],
    pub encryption_key: [HPDF_BYTE; 21usize],
    pub md5_encryption_key: [HPDF_BYTE; 16usize],
    pub arc4ctx: HPDF_ARC4_Ctx_Rec,
}
impl ::std::clone::Clone for Struct__HPDF_Encrypt_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Encrypt_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Encrypt_Rec = Struct__HPDF_Encrypt_Rec;
pub type Enum__HPDF_StreamType = ::libc::c_uint;
pub const HPDF_STREAM_UNKNOWN: ::libc::c_uint = 0;
pub const HPDF_STREAM_CALLBACK: ::libc::c_uint = 1;
pub const HPDF_STREAM_FILE: ::libc::c_uint = 2;
pub const HPDF_STREAM_MEMORY: ::libc::c_uint = 3;
pub type HPDF_StreamType = Enum__HPDF_StreamType;
pub type Enum__HPDF_WhenceMode = ::libc::c_uint;
pub const HPDF_SEEK_SET: ::libc::c_uint = 0;
pub const HPDF_SEEK_CUR: ::libc::c_uint = 1;
pub const HPDF_SEEK_END: ::libc::c_uint = 2;
pub type HPDF_WhenceMode = Enum__HPDF_WhenceMode;
pub type HPDF_Stream = *mut Struct__HPDF_Stream_Rec;
pub type HPDF_Stream_Write_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream,
                                        ptr: *const HPDF_BYTE, siz: HPDF_UINT)
                              -> HPDF_STATUS>;
pub type HPDF_Stream_Read_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream,
                                        ptr: *mut HPDF_BYTE,
                                        siz: *mut HPDF_UINT) -> HPDF_STATUS>;
pub type HPDF_Stream_Seek_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream, pos: HPDF_INT,
                                        mode: HPDF_WhenceMode)
                              -> HPDF_STATUS>;
pub type HPDF_Stream_Tell_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream) -> HPDF_INT32>;
pub type HPDF_Stream_Free_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream) -> ()>;
pub type HPDF_Stream_Size_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream) -> HPDF_UINT32>;
pub type HPDF_MemStreamAttr = *mut Struct__HPDF_MemStreamAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_MemStreamAttr_Rec {
    pub buf: HPDF_List,
    pub buf_siz: HPDF_UINT,
    pub w_pos: HPDF_UINT,
    pub w_ptr: *mut HPDF_BYTE,
    pub r_ptr_idx: HPDF_UINT,
    pub r_pos: HPDF_UINT,
    pub r_ptr: *mut HPDF_BYTE,
}
impl ::std::clone::Clone for Struct__HPDF_MemStreamAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_MemStreamAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_MemStreamAttr_Rec = Struct__HPDF_MemStreamAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Stream_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub _type: HPDF_StreamType,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub size: HPDF_UINT,
    pub write_fn: HPDF_Stream_Write_Func,
    pub read_fn: HPDF_Stream_Read_Func,
    pub seek_fn: HPDF_Stream_Seek_Func,
    pub free_fn: HPDF_Stream_Free_Func,
    pub tell_fn: HPDF_Stream_Tell_Func,
    pub size_fn: HPDF_Stream_Size_Func,
    pub attr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Stream_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Stream_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Stream_Rec = Struct__HPDF_Stream_Rec;
pub type Enum__HPDF_EncodingType = ::libc::c_uint;
pub const HPDF_STANDARD_ENCODING: ::libc::c_uint = 0;
pub const HPDF_MAC_ROMAN_ENCODING: ::libc::c_uint = 1;
pub const HPDF_WIN_ANSI_ENCODING: ::libc::c_uint = 2;
pub const HPDF_FONT_SPECIFIC: ::libc::c_uint = 3;
pub const HPDF_ENCODING_EOF: ::libc::c_uint = 4;
pub type HPDF_EncodingType = Enum__HPDF_EncodingType;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_ParseText_Rec {
    pub text: *const HPDF_BYTE,
    pub index: HPDF_UINT,
    pub len: HPDF_UINT,
    pub byte_type: HPDF_ByteType,
}
impl ::std::clone::Clone for Struct__HPDF_ParseText_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_ParseText_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_ParseText_Rec = Struct__HPDF_ParseText_Rec;
pub type HPDF_Encoder = *mut Struct__HPDF_Encoder_Rec;
pub type HPDF_Encoder_ByteType_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder,
                                        state: *mut HPDF_ParseText_Rec)
                              -> HPDF_ByteType>;
pub type HPDF_Encoder_ToUnicode_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder,
                                        code: HPDF_UINT16) -> HPDF_UNICODE>;
pub type HPDF_Encoder_EncodeText_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder,
                                        text: *const ::libc::c_char,
                                        len: HPDF_UINT,
                                        encoded_length: *mut HPDF_UINT)
                              -> *mut ::libc::c_char>;
pub type HPDF_Encoder_Write_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder,
                                        out: HPDF_Stream) -> HPDF_STATUS>;
pub type HPDF_Encoder_Init_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder)
                              -> HPDF_STATUS>;
pub type HPDF_Encoder_Free_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Encoder_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub name: [::libc::c_char; 128usize],
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub _type: HPDF_EncoderType,
    pub byte_type_fn: HPDF_Encoder_ByteType_Func,
    pub to_unicode_fn: HPDF_Encoder_ToUnicode_Func,
    pub encode_text_fn: HPDF_Encoder_EncodeText_Func,
    pub write_fn: HPDF_Encoder_Write_Func,
    pub free_fn: HPDF_Encoder_Free_Func,
    pub init_fn: HPDF_Encoder_Init_Func,
    pub attr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Encoder_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Encoder_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Encoder_Rec = Struct__HPDF_Encoder_Rec;
pub type Enum__HPDF_BaseEncodings = ::libc::c_uint;
pub const HPDF_BASE_ENCODING_STANDARD: ::libc::c_uint = 0;
pub const HPDF_BASE_ENCODING_WIN_ANSI: ::libc::c_uint = 1;
pub const HPDF_BASE_ENCODING_MAC_ROMAN: ::libc::c_uint = 2;
pub const HPDF_BASE_ENCODING_FONT_SPECIFIC: ::libc::c_uint = 3;
pub const HPDF_BASE_ENCODING_EOF: ::libc::c_uint = 4;
pub type HPDF_BaseEncodings = Enum__HPDF_BaseEncodings;
pub type HPDF_BasicEncoderAttr = *mut Struct__HPDF_BasicEncoderAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_BasicEncoderAttr_Rec {
    pub base_encoding: [::libc::c_char; 128usize],
    pub first_char: HPDF_BYTE,
    pub last_char: HPDF_BYTE,
    pub unicode_map: [HPDF_UNICODE; 256usize],
    pub has_differences: HPDF_BOOL,
    pub differences: [HPDF_BYTE; 256usize],
}
impl ::std::clone::Clone for Struct__HPDF_BasicEncoderAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_BasicEncoderAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_BasicEncoderAttr_Rec = Struct__HPDF_BasicEncoderAttr_Rec;
pub type HPDF_CMapEncoder_ByteType_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder, b: HPDF_BYTE)
                              -> HPDF_BOOL>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CidRange_Rec {
    pub from: HPDF_UINT16,
    pub to: HPDF_UINT16,
    pub cid: HPDF_UINT16,
}
impl ::std::clone::Clone for Struct__HPDF_CidRange_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CidRange_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CidRange_Rec = Struct__HPDF_CidRange_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_UnicodeMap_Rec {
    pub code: HPDF_UINT16,
    pub unicode: HPDF_UINT16,
}
impl ::std::clone::Clone for Struct__HPDF_UnicodeMap_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_UnicodeMap_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_UnicodeMap_Rec = Struct__HPDF_UnicodeMap_Rec;
pub type HPDF_CMapEncoderAttr = *mut Struct__HPDF_CMapEncoderAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CMapEncoderAttr_Rec {
    pub unicode_map: [[HPDF_UNICODE; 256usize]; 256usize],
    pub cid_map: [[HPDF_UINT16; 256usize]; 256usize],
    pub jww_line_head: [HPDF_UINT16; 128usize],
    pub cmap_range: HPDF_List,
    pub notdef_range: HPDF_List,
    pub code_space_range: HPDF_List,
    pub writing_mode: HPDF_WritingMode,
    pub registry: [::libc::c_char; 128usize],
    pub ordering: [::libc::c_char; 128usize],
    pub suppliment: HPDF_INT,
    pub is_lead_byte_fn: HPDF_CMapEncoder_ByteType_Func,
    pub is_trial_byte_fn: HPDF_CMapEncoder_ByteType_Func,
    pub uid_offset: HPDF_INT,
    pub xuid: [HPDF_UINT; 3usize],
}
impl ::std::clone::Clone for Struct__HPDF_CMapEncoderAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CMapEncoderAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CMapEncoderAttr_Rec = Struct__HPDF_CMapEncoderAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Obj_Header {
    pub obj_id: HPDF_UINT32,
    pub gen_no: HPDF_UINT16,
    pub obj_class: HPDF_UINT16,
}
impl ::std::clone::Clone for Struct__HPDF_Obj_Header {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Obj_Header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Obj_Header = Struct__HPDF_Obj_Header;
pub type HPDF_Null = *mut Struct__HPDF_Null_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Null_Rec {
    pub header: HPDF_Obj_Header,
}
impl ::std::clone::Clone for Struct__HPDF_Null_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Null_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Null_Rec = Struct__HPDF_Null_Rec;
pub type HPDF_Boolean = *mut Struct__HPDF_Boolean_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Boolean_Rec {
    pub header: HPDF_Obj_Header,
    pub value: HPDF_BOOL,
}
impl ::std::clone::Clone for Struct__HPDF_Boolean_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Boolean_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Boolean_Rec = Struct__HPDF_Boolean_Rec;
pub type HPDF_Number = *mut Struct__HPDF_Number_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Number_Rec {
    pub header: HPDF_Obj_Header,
    pub value: HPDF_INT32,
}
impl ::std::clone::Clone for Struct__HPDF_Number_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Number_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Number_Rec = Struct__HPDF_Number_Rec;
pub type HPDF_Real = *mut Struct__HPDF_Real_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Real_Rec {
    pub header: HPDF_Obj_Header,
    pub error: HPDF_Error,
    pub value: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_Real_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Real_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Real_Rec = Struct__HPDF_Real_Rec;
pub type HPDF_Name = *mut Struct__HPDF_Name_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Name_Rec {
    pub header: HPDF_Obj_Header,
    pub error: HPDF_Error,
    pub value: [::libc::c_char; 128usize],
}
impl ::std::clone::Clone for Struct__HPDF_Name_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Name_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Name_Rec = Struct__HPDF_Name_Rec;
pub type HPDF_String = *mut Struct__HPDF_String_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_String_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub encoder: HPDF_Encoder,
    pub value: *mut HPDF_BYTE,
    pub len: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_String_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_String_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_String_Rec = Struct__HPDF_String_Rec;
pub type HPDF_Binary = *mut Struct__HPDF_Binary_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Binary_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub value: *mut HPDF_BYTE,
    pub len: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_Binary_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Binary_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Binary_Rec = Struct__HPDF_Binary_Rec;
pub type HPDF_Array = *mut Struct__HPDF_Array_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Array_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub list: HPDF_List,
}
impl ::std::clone::Clone for Struct__HPDF_Array_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Array_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Array_Rec = Struct__HPDF_Array_Rec;
pub type HPDF_Xref = *mut Struct__HPDF_Xref_Rec;
pub type HPDF_Dict = *mut Struct__HPDF_Dict_Rec;
pub type HPDF_Dict_FreeFunc =
    ::std::option::Option<extern "C" fn(obj: HPDF_Dict) -> ()>;
pub type HPDF_Dict_BeforeWriteFunc =
    ::std::option::Option<extern "C" fn(obj: HPDF_Dict) -> HPDF_STATUS>;
pub type HPDF_Dict_AfterWriteFunc =
    ::std::option::Option<extern "C" fn(obj: HPDF_Dict) -> HPDF_STATUS>;
pub type HPDF_Dict_OnWriteFunc =
    ::std::option::Option<extern "C" fn(obj: HPDF_Dict, stream: HPDF_Stream)
                              -> HPDF_STATUS>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Dict_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub list: HPDF_List,
    pub before_write_fn: HPDF_Dict_BeforeWriteFunc,
    pub write_fn: HPDF_Dict_OnWriteFunc,
    pub after_write_fn: HPDF_Dict_AfterWriteFunc,
    pub free_fn: HPDF_Dict_FreeFunc,
    pub stream: HPDF_Stream,
    pub filter: HPDF_UINT,
    pub filterParams: HPDF_Dict,
    pub attr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Dict_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Dict_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Dict_Rec = Struct__HPDF_Dict_Rec;
pub type HPDF_DictElement = *mut Struct__HPDF_DictElement_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_DictElement_Rec {
    pub key: [::libc::c_char; 128usize],
    pub value: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_DictElement_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_DictElement_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_DictElement_Rec = Struct__HPDF_DictElement_Rec;
pub type HPDF_Proxy = *mut Struct__HPDF_Proxy_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Proxy_Rec {
    pub header: HPDF_Obj_Header,
    pub obj: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Proxy_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Proxy_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Proxy_Rec = Struct__HPDF_Proxy_Rec;
pub type HPDF_XrefEntry = *mut Struct__HPDF_XrefEntry_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_XrefEntry_Rec {
    pub entry_typ: ::libc::c_char,
    pub byte_offset: HPDF_UINT,
    pub gen_no: HPDF_UINT16,
    pub obj: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_XrefEntry_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_XrefEntry_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_XrefEntry_Rec = Struct__HPDF_XrefEntry_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Xref_Rec {
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub start_offset: HPDF_UINT32,
    pub entries: HPDF_List,
    pub addr: HPDF_UINT,
    pub prev: HPDF_Xref,
    pub trailer: HPDF_Dict,
}
impl ::std::clone::Clone for Struct__HPDF_Xref_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Xref_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Xref_Rec = Struct__HPDF_Xref_Rec;
pub type HPDF_EmbeddedFile = HPDF_Dict;
pub type HPDF_NameDict = HPDF_Dict;
pub type HPDF_NameTree = HPDF_Dict;
pub type HPDF_Pages = HPDF_Dict;
pub type HPDF_Page = HPDF_Dict;
pub type HPDF_Annotation = HPDF_Dict;
pub type HPDF_3DMeasure = HPDF_Dict;
pub type HPDF_ExData = HPDF_Dict;
pub type HPDF_XObject = HPDF_Dict;
pub type HPDF_Image = HPDF_Dict;
pub type HPDF_Outline = HPDF_Dict;
pub type HPDF_EncryptDict = HPDF_Dict;
pub type HPDF_Action = HPDF_Dict;
pub type HPDF_ExtGState = HPDF_Dict;
pub type HPDF_Destination = HPDF_Array;
pub type HPDF_U3D = HPDF_Dict;
pub type HPDF_OutputIntent = HPDF_Dict;
pub type HPDF_JavaScript = HPDF_Dict;
pub type HPDF_Catalog = HPDF_Dict;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CharData {
    pub char_cd: HPDF_INT16,
    pub unicode: HPDF_UNICODE,
    pub width: HPDF_INT16,
}
impl ::std::clone::Clone for Struct__HPDF_CharData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CharData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CharData = Struct__HPDF_CharData;
pub type Enum__HPDF_FontDefType = ::libc::c_uint;
pub const HPDF_FONTDEF_TYPE_TYPE1: ::libc::c_uint = 0;
pub const HPDF_FONTDEF_TYPE_TRUETYPE: ::libc::c_uint = 1;
pub const HPDF_FONTDEF_TYPE_CID: ::libc::c_uint = 2;
pub const HPDF_FONTDEF_TYPE_UNINITIALIZED: ::libc::c_uint = 3;
pub const HPDF_FONTDEF_TYPE_EOF: ::libc::c_uint = 4;
pub type HPDF_FontDefType = Enum__HPDF_FontDefType;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CID_Width {
    pub cid: HPDF_UINT16,
    pub width: HPDF_INT16,
}
impl ::std::clone::Clone for Struct__HPDF_CID_Width {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CID_Width {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CID_Width = Struct__HPDF_CID_Width;
pub type HPDF_FontDef = *mut Struct__HPDF_FontDef_Rec;
pub type HPDF_FontDef_FreeFunc =
    ::std::option::Option<extern "C" fn(fontdef: HPDF_FontDef) -> ()>;
pub type HPDF_FontDef_CleanFunc =
    ::std::option::Option<extern "C" fn(fontdef: HPDF_FontDef) -> ()>;
pub type HPDF_FontDef_InitFunc =
    ::std::option::Option<extern "C" fn(fontdef: HPDF_FontDef)
                              -> HPDF_STATUS>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_FontDef_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub base_font: [::libc::c_char; 128usize],
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub _type: HPDF_FontDefType,
    pub clean_fn: HPDF_FontDef_CleanFunc,
    pub free_fn: HPDF_FontDef_FreeFunc,
    pub init_fn: HPDF_FontDef_InitFunc,
    pub ascent: HPDF_INT16,
    pub descent: HPDF_INT16,
    pub flags: HPDF_UINT,
    pub font_bbox: HPDF_Box,
    pub italic_angle: HPDF_INT16,
    pub stemv: HPDF_UINT16,
    pub avg_width: HPDF_INT16,
    pub max_width: HPDF_INT16,
    pub missing_width: HPDF_INT16,
    pub stemh: HPDF_UINT16,
    pub x_height: HPDF_UINT16,
    pub cap_height: HPDF_UINT16,
    pub descriptor: HPDF_Dict,
    pub data: HPDF_Stream,
    pub valid: HPDF_BOOL,
    pub attr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_FontDef_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_FontDef_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_FontDef_Rec = Struct__HPDF_FontDef_Rec;
pub type HPDF_Type1FontDefAttr = *mut Struct__HPDF_Type1FontDefAttrRec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Type1FontDefAttrRec {
    pub first_char: HPDF_BYTE,
    pub last_char: HPDF_BYTE,
    pub widths: *mut HPDF_CharData,
    pub widths_count: HPDF_UINT,
    pub leading: HPDF_INT16,
    pub char_set: *mut ::libc::c_char,
    pub encoding_scheme: [::libc::c_char; 128usize],
    pub length1: HPDF_UINT,
    pub length2: HPDF_UINT,
    pub length3: HPDF_UINT,
    pub is_base14font: HPDF_BOOL,
    pub is_fixed_pitch: HPDF_BOOL,
    pub font_data: HPDF_Stream,
}
impl ::std::clone::Clone for Struct__HPDF_Type1FontDefAttrRec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Type1FontDefAttrRec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Type1FontDefAttr_Rec = Struct__HPDF_Type1FontDefAttrRec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_Table {
    pub tag: [::libc::c_char; 4usize],
    pub check_sum: HPDF_UINT32,
    pub offset: HPDF_UINT32,
    pub length: HPDF_UINT32,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_Table {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_Table {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTFTable = Struct__HPDF_TTF_Table;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_OffsetTbl {
    pub sfnt_version: HPDF_UINT32,
    pub num_tables: HPDF_UINT16,
    pub search_range: HPDF_UINT16,
    pub entry_selector: HPDF_UINT16,
    pub range_shift: HPDF_UINT16,
    pub table: *mut HPDF_TTFTable,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_OffsetTbl {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_OffsetTbl {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_OffsetTbl = Struct__HPDF_TTF_OffsetTbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_CmapRange {
    pub format: HPDF_UINT16,
    pub length: HPDF_UINT16,
    pub language: HPDF_UINT16,
    pub seg_count_x2: HPDF_UINT16,
    pub search_range: HPDF_UINT16,
    pub entry_selector: HPDF_UINT16,
    pub range_shift: HPDF_UINT16,
    pub end_count: *mut HPDF_UINT16,
    pub reserved_pad: HPDF_UINT16,
    pub start_count: *mut HPDF_UINT16,
    pub id_delta: *mut HPDF_INT16,
    pub id_range_offset: *mut HPDF_UINT16,
    pub glyph_id_array: *mut HPDF_UINT16,
    pub glyph_id_array_count: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_CmapRange {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_CmapRange {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_CmapRange = Struct__HPDF_TTF_CmapRange;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_GryphOffsets {
    pub base_offset: HPDF_UINT32,
    pub offsets: *mut HPDF_UINT32,
    pub flgs: *mut HPDF_BYTE,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_GryphOffsets {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_GryphOffsets {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_GryphOffsets = Struct__HPDF_TTF_GryphOffsets;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_LongHorMetric {
    pub advance_width: HPDF_UINT16,
    pub lsb: HPDF_INT16,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_LongHorMetric {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_LongHorMetric {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_LongHorMetric = Struct__HPDF_TTF_LongHorMetric;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_FontHeader {
    pub version_number: [HPDF_BYTE; 4usize],
    pub font_revision: HPDF_UINT32,
    pub check_sum_adjustment: HPDF_UINT32,
    pub magic_number: HPDF_UINT32,
    pub flags: HPDF_UINT16,
    pub units_per_em: HPDF_UINT16,
    pub created: [HPDF_BYTE; 8usize],
    pub modified: [HPDF_BYTE; 8usize],
    pub x_min: HPDF_INT16,
    pub y_min: HPDF_INT16,
    pub x_max: HPDF_INT16,
    pub y_max: HPDF_INT16,
    pub mac_style: HPDF_UINT16,
    pub lowest_rec_ppem: HPDF_UINT16,
    pub font_direction_hint: HPDF_INT16,
    pub index_to_loc_format: HPDF_INT16,
    pub glyph_data_format: HPDF_INT16,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_FontHeader {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_FontHeader {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_FontHeader = Struct__HPDF_TTF_FontHeader;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_NameRecord {
    pub platform_id: HPDF_UINT16,
    pub encoding_id: HPDF_UINT16,
    pub language_id: HPDF_UINT16,
    pub name_id: HPDF_UINT16,
    pub length: HPDF_UINT16,
    pub offset: HPDF_UINT16,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_NameRecord {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_NameRecord {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_NameRecord = Struct__HPDF_TTF_NameRecord;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_NamingTable {
    pub format: HPDF_UINT16,
    pub count: HPDF_UINT16,
    pub string_offset: HPDF_UINT16,
    pub name_records: *mut HPDF_TTF_NameRecord,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_NamingTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_NamingTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_NamingTable = Struct__HPDF_TTF_NamingTable;
pub type HPDF_TTFontDefAttr = *mut Struct__HPDF_TTFontDefAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTFontDefAttr_Rec {
    pub base_font: [::libc::c_char; 128usize],
    pub first_char: HPDF_BYTE,
    pub last_char: HPDF_BYTE,
    pub char_set: *mut ::libc::c_char,
    pub tag_name: [::libc::c_char; 7usize],
    pub tag_name2: [::libc::c_char; 14usize],
    pub header: HPDF_TTF_FontHeader,
    pub glyph_tbl: HPDF_TTF_GryphOffsets,
    pub num_glyphs: HPDF_UINT16,
    pub name_tbl: HPDF_TTF_NamingTable,
    pub h_metric: *mut HPDF_TTF_LongHorMetric,
    pub num_h_metric: HPDF_UINT16,
    pub offset_tbl: HPDF_TTF_OffsetTbl,
    pub cmap: HPDF_TTF_CmapRange,
    pub fs_type: HPDF_UINT16,
    pub sfamilyclass: [HPDF_BYTE; 2usize],
    pub panose: [HPDF_BYTE; 10usize],
    pub code_page_range1: HPDF_UINT32,
    pub code_page_range2: HPDF_UINT32,
    pub length1: HPDF_UINT,
    pub embedding: HPDF_BOOL,
    pub is_cidfont: HPDF_BOOL,
    pub stream: HPDF_Stream,
}
impl ::std::clone::Clone for Struct__HPDF_TTFontDefAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTFontDefAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTFontDefAttr_Rec = Struct__HPDF_TTFontDefAttr_Rec;
pub type HPDF_CIDFontDefAttr = *mut Struct__HPDF_CIDFontDefAttrRec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CIDFontDefAttrRec {
    pub widths: HPDF_List,
    pub DW: HPDF_INT16,
    pub DW2: [HPDF_INT16; 2usize],
}
impl ::std::clone::Clone for Struct__HPDF_CIDFontDefAttrRec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CIDFontDefAttrRec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CIDFontDefAttr_Rec = Struct__HPDF_CIDFontDefAttrRec;
pub type Enum__HPDF_FontType = ::libc::c_uint;
pub const HPDF_FONT_TYPE1: ::libc::c_uint = 0;
pub const HPDF_FONT_TRUETYPE: ::libc::c_uint = 1;
pub const HPDF_FONT_TYPE3: ::libc::c_uint = 2;
pub const HPDF_FONT_TYPE0_CID: ::libc::c_uint = 3;
pub const HPDF_FONT_TYPE0_TT: ::libc::c_uint = 4;
pub const HPDF_FONT_CID_TYPE0: ::libc::c_uint = 5;
pub const HPDF_FONT_CID_TYPE2: ::libc::c_uint = 6;
pub const HPDF_FONT_MMTYPE1: ::libc::c_uint = 7;
pub type HPDF_FontType = Enum__HPDF_FontType;
pub type HPDF_Font = HPDF_Dict;
pub type HPDF_Font_TextWidths_Func =
    ::std::option::Option<extern "C" fn(font: HPDF_Font,
                                        text: *const HPDF_BYTE,
                                        len: HPDF_UINT) -> HPDF_TextWidth>;
pub type HPDF_Font_MeasureText_Func =
    ::std::option::Option<extern "C" fn(font: HPDF_Font,
                                        text: *const HPDF_BYTE,
                                        len: HPDF_UINT, width: HPDF_REAL,
                                        fontsize: HPDF_REAL,
                                        charspace: HPDF_REAL,
                                        wordspace: HPDF_REAL,
                                        wordwrap: HPDF_BOOL,
                                        real_width: *mut HPDF_REAL)
                              -> HPDF_UINT>;
pub type HPDF_FontAttr = *mut Struct__HPDF_FontAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_FontAttr_Rec {
    pub _type: HPDF_FontType,
    pub writing_mode: HPDF_WritingMode,
    pub text_width_fn: HPDF_Font_TextWidths_Func,
    pub measure_text_fn: HPDF_Font_MeasureText_Func,
    pub fontdef: HPDF_FontDef,
    pub encoder: HPDF_Encoder,
    pub widths: *mut HPDF_INT16,
    pub used: *mut HPDF_BYTE,
    pub xref: HPDF_Xref,
    pub descendant_font: HPDF_Font,
    pub map_stream: HPDF_Dict,
    pub cmap_stream: HPDF_Dict,
}
impl ::std::clone::Clone for Struct__HPDF_FontAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_FontAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_FontAttr_Rec = Struct__HPDF_FontAttr_Rec;
pub type HPDF_GState = *mut Struct__HPDF_GState_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_GState_Rec {
    pub trans_matrix: HPDF_TransMatrix,
    pub line_width: HPDF_REAL,
    pub line_cap: HPDF_LineCap,
    pub line_join: HPDF_LineJoin,
    pub miter_limit: HPDF_REAL,
    pub dash_mode: HPDF_DashMode,
    pub flatness: HPDF_REAL,
    pub char_space: HPDF_REAL,
    pub word_space: HPDF_REAL,
    pub h_scalling: HPDF_REAL,
    pub text_leading: HPDF_REAL,
    pub rendering_mode: HPDF_TextRenderingMode,
    pub text_rise: HPDF_REAL,
    pub cs_fill: HPDF_ColorSpace,
    pub cs_stroke: HPDF_ColorSpace,
    pub rgb_fill: HPDF_RGBColor,
    pub rgb_stroke: HPDF_RGBColor,
    pub cmyk_fill: HPDF_CMYKColor,
    pub cmyk_stroke: HPDF_CMYKColor,
    pub gray_fill: HPDF_REAL,
    pub gray_stroke: HPDF_REAL,
    pub font: HPDF_Font,
    pub font_size: HPDF_REAL,
    pub writing_mode: HPDF_WritingMode,
    pub prev: HPDF_GState,
    pub depth: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_GState_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_GState_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_GState_Rec = Struct__HPDF_GState_Rec;
pub type HPDF_PageAttr = *mut Struct__HPDF_PageAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_PageAttr_Rec {
    pub parent: HPDF_Pages,
    pub fonts: HPDF_Dict,
    pub xobjects: HPDF_Dict,
    pub ext_gstates: HPDF_Dict,
    pub gstate: HPDF_GState,
    pub str_pos: HPDF_Point,
    pub cur_pos: HPDF_Point,
    pub text_pos: HPDF_Point,
    pub text_matrix: HPDF_TransMatrix,
    pub gmode: HPDF_UINT16,
    pub contents: HPDF_Dict,
    pub stream: HPDF_Stream,
    pub xref: HPDF_Xref,
    pub compression_mode: HPDF_UINT,
    pub ver: *mut HPDF_PDFVer,
}
impl ::std::clone::Clone for Struct__HPDF_PageAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_PageAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_PageAttr_Rec = Struct__HPDF_PageAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Doc_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub pdf_version: HPDF_PDFVer,
    pub mmgr: HPDF_MMgr,
    pub catalog: HPDF_Catalog,
    pub outlines: HPDF_Outline,
    pub xref: HPDF_Xref,
    pub root_pages: HPDF_Pages,
    pub cur_pages: HPDF_Pages,
    pub cur_page: HPDF_Page,
    pub page_list: HPDF_List,
    pub error: HPDF_Error_Rec,
    pub info: HPDF_Dict,
    pub trailer: HPDF_Dict,
    pub font_mgr: HPDF_List,
    pub ttfont_tag: [HPDF_BYTE; 6usize],
    pub fontdef_list: HPDF_List,
    pub encoder_list: HPDF_List,
    pub cur_encoder: HPDF_Encoder,
    pub compression_mode: HPDF_BOOL,
    pub encrypt_on: HPDF_BOOL,
    pub encrypt_dict: HPDF_EncryptDict,
    pub def_encoder: HPDF_Encoder,
    pub page_per_pages: HPDF_UINT,
    pub cur_page_num: HPDF_UINT,
    pub stream: HPDF_Stream,
}
impl ::std::clone::Clone for Struct__HPDF_Doc_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Doc_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Doc_Rec = Struct__HPDF_Doc_Rec;
pub type HPDF_Doc = *mut Struct__HPDF_Doc_Rec;
extern "C" {
    pub fn HPDF_Error_Init(error: HPDF_Error, user_data: *mut ::libc::c_void)
     -> ();
    pub fn HPDF_Error_Reset(error: HPDF_Error) -> ();
    pub fn HPDF_Error_GetCode(error: HPDF_Error) -> HPDF_STATUS;
    pub fn HPDF_Error_GetDetailCode(error: HPDF_Error) -> HPDF_STATUS;
    pub fn HPDF_SetError(error: HPDF_Error, error_no: HPDF_STATUS,
                         detail_no: HPDF_STATUS) -> HPDF_STATUS;
    pub fn HPDF_RaiseError(error: HPDF_Error, error_no: HPDF_STATUS,
                           detail_no: HPDF_STATUS) -> HPDF_STATUS;
    pub fn HPDF_MMgr_New(error: HPDF_Error, buf_size: HPDF_UINT,
                         alloc_fn: HPDF_Alloc_Func, free_fn: HPDF_Free_Func)
     -> HPDF_MMgr;
    pub fn HPDF_MMgr_Free(mmgr: HPDF_MMgr) -> ();
    pub fn HPDF_GetMem(mmgr: HPDF_MMgr, size: HPDF_UINT)
     -> *mut ::libc::c_void;
    pub fn HPDF_FreeMem(mmgr: HPDF_MMgr, aptr: *mut ::libc::c_void) -> ();
    pub fn HPDF_List_New(mmgr: HPDF_MMgr, items_per_block: HPDF_UINT)
     -> HPDF_List;
    pub fn HPDF_List_Free(list: HPDF_List) -> ();
    pub fn HPDF_List_Add(list: HPDF_List, item: *mut ::libc::c_void)
     -> HPDF_STATUS;
    pub fn HPDF_List_Insert(list: HPDF_List, target: *mut ::libc::c_void,
                            item: *mut ::libc::c_void) -> HPDF_STATUS;
    pub fn HPDF_List_Remove(list: HPDF_List, item: *mut ::libc::c_void)
     -> HPDF_STATUS;
    pub fn HPDF_List_RemoveByIndex(list: HPDF_List, index: HPDF_UINT)
     -> *mut ::libc::c_void;
    pub fn HPDF_List_ItemAt(list: HPDF_List, index: HPDF_UINT)
     -> *mut ::libc::c_void;
    pub fn HPDF_List_Find(list: HPDF_List, item: *mut ::libc::c_void)
     -> HPDF_INT32;
    pub fn HPDF_List_Clear(list: HPDF_List) -> ();
    pub fn HPDF_MD5Init(ctx: *mut Struct_HPDF_MD5Context) -> ();
    pub fn HPDF_MD5Update(ctx: *mut Struct_HPDF_MD5Context,
                          buf: *const HPDF_BYTE, len: HPDF_UINT32) -> ();
    pub fn HPDF_MD5Final(digest: *mut HPDF_BYTE,
                         ctx: *mut Struct_HPDF_MD5Context) -> ();
    pub fn HPDF_PadOrTrancatePasswd(pwd: *const ::libc::c_char,
                                    new_pwd: *mut HPDF_BYTE) -> ();
    pub fn HPDF_Encrypt_Init(attr: HPDF_Encrypt) -> ();
    pub fn HPDF_Encrypt_CreateUserKey(attr: HPDF_Encrypt) -> ();
    pub fn HPDF_Encrypt_CreateOwnerKey(attr: HPDF_Encrypt) -> ();
    pub fn HPDF_Encrypt_CreateEncryptionKey(attr: HPDF_Encrypt) -> ();
    pub fn HPDF_Encrypt_InitKey(attr: HPDF_Encrypt, object_id: HPDF_UINT32,
                                gen_no: HPDF_UINT16) -> ();
    pub fn HPDF_Encrypt_Reset(attr: HPDF_Encrypt) -> ();
    pub fn HPDF_Encrypt_CryptBuf(attr: HPDF_Encrypt, src: *const HPDF_BYTE,
                                 dst: *mut HPDF_BYTE, len: HPDF_UINT) -> ();
    pub fn HPDF_MemStream_New(mmgr: HPDF_MMgr, buf_siz: HPDF_UINT)
     -> HPDF_Stream;
    pub fn HPDF_MemStream_GetBufPtr(stream: HPDF_Stream, index: HPDF_UINT,
                                    length: *mut HPDF_UINT) -> *mut HPDF_BYTE;
    pub fn HPDF_MemStream_GetBufSize(stream: HPDF_Stream) -> HPDF_UINT;
    pub fn HPDF_MemStream_GetBufCount(stream: HPDF_Stream) -> HPDF_UINT;
    pub fn HPDF_MemStream_Rewrite(stream: HPDF_Stream, buf: *mut HPDF_BYTE,
                                  size: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_MemStream_FreeData(stream: HPDF_Stream) -> ();
    pub fn HPDF_Stream_WriteToStream(src: HPDF_Stream, dst: HPDF_Stream,
                                     filter: HPDF_UINT, e: HPDF_Encrypt)
     -> HPDF_STATUS;
    pub fn HPDF_FileReader_New(mmgr: HPDF_MMgr, fname: *const ::libc::c_char)
     -> HPDF_Stream;
    pub fn HPDF_FileWriter_New(mmgr: HPDF_MMgr, fname: *const ::libc::c_char)
     -> HPDF_Stream;
    pub fn HPDF_CallbackReader_New(mmgr: HPDF_MMgr,
                                   read_fn: HPDF_Stream_Read_Func,
                                   seek_fn: HPDF_Stream_Seek_Func,
                                   tell_fn: HPDF_Stream_Tell_Func,
                                   size_fn: HPDF_Stream_Size_Func,
                                   data: *mut ::libc::c_void) -> HPDF_Stream;
    pub fn HPDF_CallbackWriter_New(mmgr: HPDF_MMgr,
                                   write_fn: HPDF_Stream_Write_Func,
                                   data: *mut ::libc::c_void) -> HPDF_Stream;
    pub fn HPDF_Stream_Free(stream: HPDF_Stream) -> ();
    pub fn HPDF_Stream_WriteChar(stream: HPDF_Stream, value: ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteStr(stream: HPDF_Stream,
                                value: *const ::libc::c_char) -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteUChar(stream: HPDF_Stream, value: HPDF_BYTE)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteInt(stream: HPDF_Stream, value: HPDF_INT)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteUInt(stream: HPDF_Stream, value: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteReal(stream: HPDF_Stream, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_Write(stream: HPDF_Stream, ptr: *const HPDF_BYTE,
                             size: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Stream_Read(stream: HPDF_Stream, ptr: *mut HPDF_BYTE,
                            size: *mut HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Stream_ReadLn(stream: HPDF_Stream, s: *mut ::libc::c_char,
                              size: *mut HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Stream_Tell(stream: HPDF_Stream) -> HPDF_INT32;
    pub fn HPDF_Stream_Seek(stream: HPDF_Stream, pos: HPDF_INT,
                            mode: HPDF_WhenceMode) -> HPDF_STATUS;
    pub fn HPDF_Stream_EOF(stream: HPDF_Stream) -> HPDF_BOOL;
    pub fn HPDF_Stream_Size(stream: HPDF_Stream) -> HPDF_UINT32;
    pub fn HPDF_Stream_Flush(stream: HPDF_Stream) -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteEscapeName(stream: HPDF_Stream,
                                       value: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteEscapeText2(stream: HPDF_Stream,
                                        text: *const ::libc::c_char,
                                        len: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteEscapeText(stream: HPDF_Stream,
                                       text: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteBinary(stream: HPDF_Stream,
                                   data: *const HPDF_BYTE, len: HPDF_UINT,
                                   e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Stream_Validate(stream: HPDF_Stream) -> HPDF_STATUS;
    pub fn HPDF_Encoder_Validate(encoder: HPDF_Encoder) -> HPDF_STATUS;
    pub fn HPDF_Encoder_SetParseText(encoder: HPDF_Encoder,
                                     state: *mut HPDF_ParseText_Rec,
                                     text: *const HPDF_BYTE, len: HPDF_UINT)
     -> ();
    pub fn HPDF_Encoder_ByteType(encoder: HPDF_Encoder,
                                 state: *mut HPDF_ParseText_Rec)
     -> HPDF_ByteType;
    pub fn HPDF_Encoder_ToUnicode(encoder: HPDF_Encoder, code: HPDF_UINT16)
     -> HPDF_UNICODE;
    pub fn HPDF_Encoder_Free(encoder: HPDF_Encoder) -> ();
    pub fn HPDF_BasicEncoder_New(mmgr: HPDF_MMgr,
                                 encoding_name: *const ::libc::c_char)
     -> HPDF_Encoder;
    pub fn HPDF_BasicEncoder_Free(encoder: HPDF_Encoder) -> ();
    pub fn HPDF_BasicEncoder_Write(encoder: HPDF_Encoder, out: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_BasicEncoder_ToUnicode(encoder: HPDF_Encoder,
                                       code: HPDF_UINT16) -> HPDF_UNICODE;
    pub fn HPDF_CMapEncoder_New(mmgr: HPDF_MMgr, name: *mut ::libc::c_char,
                                init_fn: HPDF_Encoder_Init_Func)
     -> HPDF_Encoder;
    pub fn HPDF_CMapEncoder_InitAttr(encoder: HPDF_Encoder) -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_Free(encoder: HPDF_Encoder) -> ();
    pub fn HPDF_CMapEncoder_Write(encoder: HPDF_Encoder, out: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_ToUnicode(encoder: HPDF_Encoder,
                                      code: HPDF_UINT16) -> HPDF_UNICODE;
    pub fn HPDF_CMapEncoder_ToCID(encoder: HPDF_Encoder, code: HPDF_UINT16)
     -> HPDF_UINT16;
    pub fn HPDF_CMapEncoder_SetParseText(encoder: HPDF_Encoder,
                                         state: *mut HPDF_ParseText_Rec,
                                         text: *const HPDF_BYTE,
                                         len: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_ByteType(encoder: HPDF_Encoder,
                                     state: *mut HPDF_ParseText_Rec)
     -> HPDF_ByteType;
    pub fn HPDF_CMapEncoder_AddCMap(encoder: HPDF_Encoder,
                                    range: *const HPDF_CidRange_Rec)
     -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_AddNotDefRange(encoder: HPDF_Encoder,
                                           range: HPDF_CidRange_Rec)
     -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_AddCodeSpaceRange(encoder: HPDF_Encoder,
                                              range: HPDF_CidRange_Rec)
     -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_SetUnicodeArray(encoder: HPDF_Encoder,
                                            array1:
                                                *const HPDF_UnicodeMap_Rec)
     -> ();
    pub fn HPDF_CMapEncoder_AddJWWLineHead(encoder: HPDF_Encoder,
                                           code: *const HPDF_UINT16)
     -> HPDF_STATUS;
    pub fn HPDF_Encoder_CheckJWWLineHead(encoder: HPDF_Encoder,
                                         code: HPDF_UINT16) -> HPDF_BOOL;
    pub fn HPDF_UnicodeToGryphName(unicode: HPDF_UNICODE)
     -> *const ::libc::c_char;
    pub fn HPDF_GryphNameToUnicode(gryph_name: *const ::libc::c_char)
     -> HPDF_UNICODE;
    pub fn HPDF_Obj_WriteValue(obj: *mut ::libc::c_void, stream: HPDF_Stream,
                               e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Obj_Write(obj: *mut ::libc::c_void, stream: HPDF_Stream,
                          e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Obj_Free(mmgr: HPDF_MMgr, obj: *mut ::libc::c_void) -> ();
    pub fn HPDF_Obj_ForceFree(mmgr: HPDF_MMgr, obj: *mut ::libc::c_void)
     -> ();
    pub fn HPDF_Null_New(mmgr: HPDF_MMgr) -> HPDF_Null;
    pub fn HPDF_Boolean_New(mmgr: HPDF_MMgr, value: HPDF_BOOL)
     -> HPDF_Boolean;
    pub fn HPDF_Boolean_Write(obj: HPDF_Boolean, stream: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_Number_New(mmgr: HPDF_MMgr, value: HPDF_INT32) -> HPDF_Number;
    pub fn HPDF_Number_SetValue(obj: HPDF_Number, value: HPDF_INT32) -> ();
    pub fn HPDF_Number_Write(obj: HPDF_Number, stream: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_Real_New(mmgr: HPDF_MMgr, value: HPDF_REAL) -> HPDF_Real;
    pub fn HPDF_Real_Write(obj: HPDF_Real, stream: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_Real_SetValue(obj: HPDF_Real, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Name_New(mmgr: HPDF_MMgr, value: *const ::libc::c_char)
     -> HPDF_Name;
    pub fn HPDF_Name_SetValue(obj: HPDF_Name, value: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Name_Write(obj: HPDF_Name, stream: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_Name_GetValue(obj: HPDF_Name) -> *const ::libc::c_char;
    pub fn HPDF_String_New(mmgr: HPDF_MMgr, value: *const ::libc::c_char,
                           encoder: HPDF_Encoder) -> HPDF_String;
    pub fn HPDF_String_SetValue(obj: HPDF_String,
                                value: *const ::libc::c_char) -> HPDF_STATUS;
    pub fn HPDF_String_Free(obj: HPDF_String) -> ();
    pub fn HPDF_String_Write(obj: HPDF_String, stream: HPDF_Stream,
                             e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_String_Cmp(s1: HPDF_String, s2: HPDF_String) -> HPDF_INT32;
    pub fn HPDF_Binary_New(mmgr: HPDF_MMgr, value: *mut HPDF_BYTE,
                           len: HPDF_UINT) -> HPDF_Binary;
    pub fn HPDF_Binary_SetValue(obj: HPDF_Binary, value: *mut HPDF_BYTE,
                                len: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Binary_GetValue(obj: HPDF_Binary) -> *mut HPDF_BYTE;
    pub fn HPDF_Binary_Free(obj: HPDF_Binary) -> ();
    pub fn HPDF_Binary_Write(obj: HPDF_Binary, stream: HPDF_Stream,
                             e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Binary_GetLen(obj: HPDF_Binary) -> HPDF_UINT;
    pub fn HPDF_Array_New(mmgr: HPDF_MMgr) -> HPDF_Array;
    pub fn HPDF_Box_Array_New(mmgr: HPDF_MMgr, _box: HPDF_Box) -> HPDF_Array;
    pub fn HPDF_Array_Free(array: HPDF_Array) -> ();
    pub fn HPDF_Array_Write(array: HPDF_Array, stream: HPDF_Stream,
                            e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Array_Add(array: HPDF_Array, obj: *mut ::libc::c_void)
     -> HPDF_STATUS;
    pub fn HPDF_Array_Insert(array: HPDF_Array, target: *mut ::libc::c_void,
                             obj: *mut ::libc::c_void) -> HPDF_STATUS;
    pub fn HPDF_Array_GetItem(array: HPDF_Array, index: HPDF_UINT,
                              obj_class: HPDF_UINT16) -> *mut ::libc::c_void;
    pub fn HPDF_Array_AddNumber(array: HPDF_Array, value: HPDF_INT32)
     -> HPDF_STATUS;
    pub fn HPDF_Array_AddReal(array: HPDF_Array, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Array_AddNull(array: HPDF_Array) -> HPDF_STATUS;
    pub fn HPDF_Array_AddName(array: HPDF_Array, value: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Array_Clear(array: HPDF_Array) -> ();
    pub fn HPDF_Array_Items(array: HPDF_Array) -> HPDF_UINT;
    pub fn HPDF_Dict_New(mmgr: HPDF_MMgr) -> HPDF_Dict;
    pub fn HPDF_DictStream_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Dict;
    pub fn HPDF_Dict_Free(dict: HPDF_Dict) -> ();
    pub fn HPDF_Dict_Write(dict: HPDF_Dict, stream: HPDF_Stream,
                           e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Dict_GetKeyByObj(dict: HPDF_Dict, obj: *mut ::libc::c_void)
     -> *const ::libc::c_char;
    pub fn HPDF_Dict_Add(dict: HPDF_Dict, key: *const ::libc::c_char,
                         obj: *mut ::libc::c_void) -> HPDF_STATUS;
    pub fn HPDF_Dict_GetItem(dict: HPDF_Dict, key: *const ::libc::c_char,
                             obj_class: HPDF_UINT16) -> *mut ::libc::c_void;
    pub fn HPDF_Dict_AddName(dict: HPDF_Dict, key: *const ::libc::c_char,
                             value: *const ::libc::c_char) -> HPDF_STATUS;
    pub fn HPDF_Dict_AddNumber(dict: HPDF_Dict, key: *const ::libc::c_char,
                               value: HPDF_INT32) -> HPDF_STATUS;
    pub fn HPDF_Dict_AddReal(dict: HPDF_Dict, key: *const ::libc::c_char,
                             value: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Dict_AddBoolean(dict: HPDF_Dict, key: *const ::libc::c_char,
                                value: HPDF_BOOL) -> HPDF_STATUS;
    pub fn HPDF_Dict_RemoveElement(dict: HPDF_Dict,
                                   key: *const ::libc::c_char) -> HPDF_STATUS;
    pub fn HPDF_Proxy_New(mmgr: HPDF_MMgr, obj: *mut ::libc::c_void)
     -> HPDF_Proxy;
    pub fn HPDF_Xref_New(mmgr: HPDF_MMgr, offset: HPDF_UINT32) -> HPDF_Xref;
    pub fn HPDF_Xref_Free(xref: HPDF_Xref) -> ();
    pub fn HPDF_Xref_Add(xref: HPDF_Xref, obj: *mut ::libc::c_void)
     -> HPDF_STATUS;
    pub fn HPDF_Xref_GetEntry(xref: HPDF_Xref, index: HPDF_UINT)
     -> HPDF_XrefEntry;
    pub fn HPDF_Xref_WriteToStream(xref: HPDF_Xref, stream: HPDF_Stream,
                                   e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Xref_GetEntryByObjectId(xref: HPDF_Xref, obj_id: HPDF_UINT)
     -> HPDF_XrefEntry;
    pub fn HPDF_Catalog_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Catalog;
    pub fn HPDF_Catalog_GetNames(catalog: HPDF_Catalog) -> HPDF_NameDict;
    pub fn HPDF_Catalog_SetNames(catalog: HPDF_Catalog, dict: HPDF_NameDict)
     -> HPDF_STATUS;
    pub fn HPDF_Catalog_GetRoot(catalog: HPDF_Catalog) -> HPDF_Pages;
    pub fn HPDF_Catalog_GetPageLayout(catalog: HPDF_Catalog)
     -> HPDF_PageLayout;
    pub fn HPDF_Catalog_SetPageLayout(catalog: HPDF_Catalog,
                                      layout: HPDF_PageLayout) -> HPDF_STATUS;
    pub fn HPDF_Catalog_GetPageMode(catalog: HPDF_Catalog) -> HPDF_PageMode;
    pub fn HPDF_Catalog_SetPageMode(catalog: HPDF_Catalog,
                                    mode: HPDF_PageMode) -> HPDF_STATUS;
    pub fn HPDF_Catalog_SetOpenAction(catalog: HPDF_Catalog,
                                      open_action: HPDF_Destination)
     -> HPDF_STATUS;
    pub fn HPDF_Catalog_AddPageLabel(catalog: HPDF_Catalog,
                                     page_num: HPDF_UINT,
                                     page_label: HPDF_Dict) -> HPDF_STATUS;
    pub fn HPDF_Catalog_GetViewerPreference(catalog: HPDF_Catalog)
     -> HPDF_UINT;
    pub fn HPDF_Catalog_SetViewerPreference(catalog: HPDF_Catalog,
                                            value: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Catalog_Validate(catalog: HPDF_Catalog) -> HPDF_BOOL;
    pub fn HPDF_Image_Load1BitImageFromMem(mmgr: HPDF_MMgr,
                                           buf: *const HPDF_BYTE,
                                           xref: HPDF_Xref, width: HPDF_UINT,
                                           height: HPDF_UINT,
                                           line_width: HPDF_UINT,
                                           top_is_first: HPDF_BOOL)
     -> HPDF_Image;
    pub fn HPDF_Image_LoadPngImage(mmgr: HPDF_MMgr, png_data: HPDF_Stream,
                                   xref: HPDF_Xref,
                                   delayed_loading: HPDF_BOOL) -> HPDF_Image;
    pub fn HPDF_Image_LoadJpegImage(mmgr: HPDF_MMgr, jpeg_data: HPDF_Stream,
                                    xref: HPDF_Xref) -> HPDF_Image;
    pub fn HPDF_Image_LoadJpegImageFromMem(mmgr: HPDF_MMgr,
                                           buf: *const HPDF_BYTE,
                                           size: HPDF_UINT, xref: HPDF_Xref)
     -> HPDF_Image;
    pub fn HPDF_Image_LoadRawImage(mmgr: HPDF_MMgr, stream: HPDF_Stream,
                                   xref: HPDF_Xref, width: HPDF_UINT,
                                   height: HPDF_UINT,
                                   color_space: HPDF_ColorSpace)
     -> HPDF_Image;
    pub fn HPDF_Image_LoadRawImageFromMem(mmgr: HPDF_MMgr,
                                          buf: *const HPDF_BYTE,
                                          xref: HPDF_Xref, width: HPDF_UINT,
                                          height: HPDF_UINT,
                                          color_space: HPDF_ColorSpace,
                                          bits_per_component: HPDF_UINT)
     -> HPDF_Image;
    pub fn HPDF_Image_Validate(image: HPDF_Image) -> HPDF_BOOL;
    pub fn HPDF_Image_SetMask(image: HPDF_Image, mask: HPDF_BOOL)
     -> HPDF_STATUS;
    pub fn HPDF_Image_SetColorSpace(image: HPDF_Image, colorspace: HPDF_Array)
     -> HPDF_STATUS;
    pub fn HPDF_Image_SetRenderingIntent(image: HPDF_Image,
                                         intent: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_FontDef_Free(fontdef: HPDF_FontDef) -> ();
    pub fn HPDF_FontDef_Cleanup(fontdef: HPDF_FontDef) -> ();
    pub fn HPDF_FontDef_Validate(fontdef: HPDF_FontDef) -> HPDF_BOOL;
    pub fn HPDF_Type1FontDef_New(mmgr: HPDF_MMgr) -> HPDF_FontDef;
    pub fn HPDF_Type1FontDef_Load(mmgr: HPDF_MMgr, afm: HPDF_Stream,
                                  font_data: HPDF_Stream) -> HPDF_FontDef;
    pub fn HPDF_Type1FontDef_Duplicate(mmgr: HPDF_MMgr, src: HPDF_FontDef)
     -> HPDF_FontDef;
    pub fn HPDF_Type1FontDef_SetWidths(fontdef: HPDF_FontDef,
                                       widths: *const HPDF_CharData)
     -> HPDF_STATUS;
    pub fn HPDF_Type1FontDef_GetWidthByName(fontdef: HPDF_FontDef,
                                            gryph_name: *const ::libc::c_char)
     -> HPDF_INT16;
    pub fn HPDF_Type1FontDef_GetWidth(fontdef: HPDF_FontDef,
                                      unicode: HPDF_UNICODE) -> HPDF_INT16;
    pub fn HPDF_Base14FontDef_New(mmgr: HPDF_MMgr,
                                  font_name: *const ::libc::c_char)
     -> HPDF_FontDef;
    pub fn HPDF_TTFontDef_New(mmgr: HPDF_MMgr) -> HPDF_FontDef;
    pub fn HPDF_TTFontDef_Load(mmgr: HPDF_MMgr, stream: HPDF_Stream,
                               embedding: HPDF_BOOL) -> HPDF_FontDef;
    pub fn HPDF_TTFontDef_Load2(mmgr: HPDF_MMgr, stream: HPDF_Stream,
                                index: HPDF_UINT, embedding: HPDF_BOOL)
     -> HPDF_FontDef;
    pub fn HPDF_TTFontDef_GetGlyphid(fontdef: HPDF_FontDef,
                                     unicode: HPDF_UINT16) -> HPDF_UINT16;
    pub fn HPDF_TTFontDef_GetCharWidth(fontdef: HPDF_FontDef,
                                       unicode: HPDF_UINT16) -> HPDF_INT16;
    pub fn HPDF_TTFontDef_GetGidWidth(fontdef: HPDF_FontDef, gid: HPDF_UINT16)
     -> HPDF_INT16;
    pub fn HPDF_TTFontDef_SaveFontData(fontdef: HPDF_FontDef,
                                       stream: HPDF_Stream) -> HPDF_STATUS;
    pub fn HPDF_TTFontDef_GetCharBBox(fontdef: HPDF_FontDef,
                                      unicode: HPDF_UINT16) -> HPDF_Box;
    pub fn HPDF_TTFontDef_SetTagName(fontdef: HPDF_FontDef,
                                     tag: *mut ::libc::c_char) -> ();
    pub fn HPDF_CIDFontDef_New(mmgr: HPDF_MMgr, name: *mut ::libc::c_char,
                               init_fn: HPDF_FontDef_InitFunc)
     -> HPDF_FontDef;
    pub fn HPDF_CIDFontDef_AddWidth(fontdef: HPDF_FontDef,
                                    widths: *const HPDF_CID_Width)
     -> HPDF_STATUS;
    pub fn HPDF_CIDFontDef_GetCIDWidth(fontdef: HPDF_FontDef,
                                       cid: HPDF_UINT16) -> HPDF_INT16;
    pub fn HPDF_CIDFontDef_ChangeStyle(fontdef: HPDF_FontDef, bold: HPDF_BOOL,
                                       italic: HPDF_BOOL) -> HPDF_STATUS;
    pub fn HPDF_Type1Font_New(mmgr: HPDF_MMgr, fontdef: HPDF_FontDef,
                              encoder: HPDF_Encoder, xref: HPDF_Xref)
     -> HPDF_Font;
    pub fn HPDF_TTFont_New(mmgr: HPDF_MMgr, fontdef: HPDF_FontDef,
                           encoder: HPDF_Encoder, xref: HPDF_Xref)
     -> HPDF_Font;
    pub fn HPDF_Type0Font_New(mmgr: HPDF_MMgr, fontdef: HPDF_FontDef,
                              encoder: HPDF_Encoder, xref: HPDF_Xref)
     -> HPDF_Font;
    pub fn HPDF_Font_Validate(font: HPDF_Font) -> HPDF_BOOL;
    pub fn HPDF_GState_New(mmgr: HPDF_MMgr, current: HPDF_GState)
     -> HPDF_GState;
    pub fn HPDF_GState_Free(mmgr: HPDF_MMgr, gstate: HPDF_GState)
     -> HPDF_GState;
    pub fn HPDF_ExtGState_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Dict;
    pub fn HPDF_ExtGState_Validate(ext_gstate: HPDF_ExtGState) -> HPDF_BOOL;
    pub fn HPDF_Pages_New(mmgr: HPDF_MMgr, parent: HPDF_Pages,
                          xref: HPDF_Xref) -> HPDF_Pages;
    pub fn HPDF_Pages_Validate(pages: HPDF_Pages) -> HPDF_BOOL;
    pub fn HPDF_Pages_AddKids(parent: HPDF_Pages, kid: HPDF_Dict)
     -> HPDF_STATUS;
    pub fn HPDF_Page_InsertBefore(page: HPDF_Page, target: HPDF_Page)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Validate(page: HPDF_Page) -> HPDF_BOOL;
    pub fn HPDF_Page_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Page;
    pub fn HPDF_Page_GetInheritableItem(page: HPDF_Page,
                                        key: *const ::libc::c_char,
                                        obj_class: HPDF_UINT16)
     -> *mut ::libc::c_void;
    pub fn HPDF_Page_GetXObjectName(page: HPDF_Page, xobj: HPDF_XObject)
     -> *const ::libc::c_char;
    pub fn HPDF_Page_GetLocalFontName(page: HPDF_Page, font: HPDF_Font)
     -> *const ::libc::c_char;
    pub fn HPDF_Page_GetExtGStateName(page: HPDF_Page, gstate: HPDF_ExtGState)
     -> *const ::libc::c_char;
    pub fn HPDF_Page_GetMediaBox(page: HPDF_Page) -> HPDF_Box;
    pub fn HPDF_Page_SetBoxValue(page: HPDF_Page, name: *const ::libc::c_char,
                                 index: HPDF_UINT, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetFilter(page: HPDF_Page, filter: HPDF_UINT) -> ();
    pub fn HPDF_Page_CheckState(page: HPDF_Page, mode: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_OutlineRoot_New(mmgr: HPDF_MMgr, xref: HPDF_Xref)
     -> HPDF_Outline;
    pub fn HPDF_Outline_New(mmgr: HPDF_MMgr, parent: HPDF_Outline,
                            title: *const ::libc::c_char,
                            encoder: HPDF_Encoder, xref: HPDF_Xref)
     -> HPDF_Outline;
    pub fn HPDF_Outline_GetFirst(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetLast(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetPrev(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetNext(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetParent(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetOpened(outline: HPDF_Outline) -> HPDF_BOOL;
    pub fn HPDF_Outline_Validate(obj: HPDF_Outline) -> HPDF_BOOL;
    pub fn HPDF_Doc_FindEncoder(pdf: HPDF_Doc,
                                encoding_name: *const ::libc::c_char)
     -> HPDF_Encoder;
    pub fn HPDF_Doc_FindFontDef(pdf: HPDF_Doc,
                                font_name: *const ::libc::c_char)
     -> HPDF_FontDef;
    pub fn HPDF_Doc_FindFont(pdf: HPDF_Doc, font_name: *const ::libc::c_char,
                             encoding_name: *const ::libc::c_char)
     -> HPDF_Font;
    pub fn HPDF_Doc_Validate(pdf: HPDF_Doc) -> HPDF_BOOL;
    pub fn HPDF_Doc_GetCurrentPages(pdf: HPDF_Doc) -> HPDF_Pages;
    pub fn HPDF_Doc_AddPagesTo(pdf: HPDF_Doc, parent: HPDF_Pages)
     -> HPDF_Pages;
    pub fn HPDF_Doc_SetCurrentPages(pdf: HPDF_Doc, pages: HPDF_Pages)
     -> HPDF_STATUS;
    pub fn HPDF_Doc_SetCurrentPage(pdf: HPDF_Doc, page: HPDF_Page)
     -> HPDF_STATUS;
    pub fn HPDF_GetFontDef(pdf: HPDF_Doc, font_name: *const ::libc::c_char)
     -> HPDF_FontDef;
    pub fn HPDF_Doc_RegisterFontDef(pdf: HPDF_Doc, fontdef: HPDF_FontDef)
     -> HPDF_STATUS;
    pub fn HPDF_Doc_RegisterEncoder(pdf: HPDF_Doc, encoder: HPDF_Encoder)
     -> HPDF_STATUS;
    pub fn HPDF_Doc_SetEncryptOn(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_Doc_SetEncryptOff(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_Doc_PrepareEncryption(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_PDFA_AppendOutputIntents(pdf: HPDF_Doc,
                                         iccname: *const ::libc::c_char,
                                         iccdict: HPDF_Dict) -> HPDF_STATUS;
    pub fn HPDF_PDFA_SetPDFAConformance(pdf: HPDF_Doc,
                                        pdfatype: HPDF_PDFAType)
     -> HPDF_STATUS;
    pub fn HPDF_PDFA_GenerateID(arg1: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_GetVersion() -> *const ::libc::c_char;
    pub fn HPDF_NewEx(user_error_fn: HPDF_Error_Handler,
                      user_alloc_fn: HPDF_Alloc_Func,
                      user_free_fn: HPDF_Free_Func,
                      mem_pool_buf_size: HPDF_UINT,
                      user_data: *mut ::libc::c_void) -> HPDF_Doc;
    pub fn HPDF_New(user_error_fn: HPDF_Error_Handler,
                    user_data: *mut ::libc::c_void) -> HPDF_Doc;
    pub fn HPDF_SetErrorHandler(pdf: HPDF_Doc,
                                user_error_fn: HPDF_Error_Handler)
     -> HPDF_STATUS;
    pub fn HPDF_Free(pdf: HPDF_Doc) -> ();
    pub fn HPDF_NewDoc(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_FreeDoc(pdf: HPDF_Doc) -> ();
    pub fn HPDF_HasDoc(pdf: HPDF_Doc) -> HPDF_BOOL;
    pub fn HPDF_FreeDocAll(pdf: HPDF_Doc) -> ();
    pub fn HPDF_SaveToStream(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_GetContents(pdf: HPDF_Doc, buf: *mut HPDF_BYTE,
                            size: *mut HPDF_UINT32) -> HPDF_STATUS;
    pub fn HPDF_GetStreamSize(pdf: HPDF_Doc) -> HPDF_UINT32;
    pub fn HPDF_ReadFromStream(pdf: HPDF_Doc, buf: *mut HPDF_BYTE,
                               size: *mut HPDF_UINT32) -> HPDF_STATUS;
    pub fn HPDF_ResetStream(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_SaveToFile(pdf: HPDF_Doc, file_name: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_GetError(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_GetErrorDetail(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_ResetError(pdf: HPDF_Doc) -> ();
    pub fn HPDF_CheckError(error: HPDF_Error) -> HPDF_STATUS;
    pub fn HPDF_SetPagesConfiguration(pdf: HPDF_Doc,
                                      page_per_pages: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_GetPageByIndex(pdf: HPDF_Doc, index: HPDF_UINT) -> HPDF_Page;
    pub fn HPDF_GetPageMMgr(page: HPDF_Page) -> HPDF_MMgr;
    pub fn HPDF_GetPageLayout(pdf: HPDF_Doc) -> HPDF_PageLayout;
    pub fn HPDF_SetPageLayout(pdf: HPDF_Doc, layout: HPDF_PageLayout)
     -> HPDF_STATUS;
    pub fn HPDF_GetPageMode(pdf: HPDF_Doc) -> HPDF_PageMode;
    pub fn HPDF_SetPageMode(pdf: HPDF_Doc, mode: HPDF_PageMode)
     -> HPDF_STATUS;
    pub fn HPDF_GetViewerPreference(pdf: HPDF_Doc) -> HPDF_UINT;
    pub fn HPDF_SetViewerPreference(pdf: HPDF_Doc, value: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_SetOpenAction(pdf: HPDF_Doc, open_action: HPDF_Destination)
     -> HPDF_STATUS;
    pub fn HPDF_GetCurrentPage(pdf: HPDF_Doc) -> HPDF_Page;
    pub fn HPDF_AddPage(pdf: HPDF_Doc) -> HPDF_Page;
    pub fn HPDF_InsertPage(pdf: HPDF_Doc, page: HPDF_Page) -> HPDF_Page;
    pub fn HPDF_Page_SetWidth(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetHeight(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetSize(page: HPDF_Page, size: HPDF_PageSizes,
                             direction: HPDF_PageDirection) -> HPDF_STATUS;
    pub fn HPDF_Page_SetRotate(page: HPDF_Page, angle: HPDF_UINT16)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetZoom(page: HPDF_Page, zoom: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_GetFont(pdf: HPDF_Doc, font_name: *const ::libc::c_char,
                        encoding_name: *const ::libc::c_char) -> HPDF_Font;
    pub fn HPDF_LoadType1FontFromFile(pdf: HPDF_Doc,
                                      afm_file_name: *const ::libc::c_char,
                                      data_file_name: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn HPDF_GetTTFontDefFromFile(pdf: HPDF_Doc,
                                     file_name: *const ::libc::c_char,
                                     embedding: HPDF_BOOL) -> HPDF_FontDef;
    pub fn HPDF_LoadTTFontFromFile(pdf: HPDF_Doc,
                                   file_name: *const ::libc::c_char,
                                   embedding: HPDF_BOOL)
     -> *const ::libc::c_char;
    pub fn HPDF_LoadTTFontFromFile2(pdf: HPDF_Doc,
                                    file_name: *const ::libc::c_char,
                                    index: HPDF_UINT, embedding: HPDF_BOOL)
     -> *const ::libc::c_char;
    pub fn HPDF_AddPageLabel(pdf: HPDF_Doc, page_num: HPDF_UINT,
                             style: HPDF_PageNumStyle, first_page: HPDF_UINT,
                             prefix: *const ::libc::c_char) -> HPDF_STATUS;
    pub fn HPDF_UseJPFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseKRFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseCNSFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseCNTFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_CreateOutline(pdf: HPDF_Doc, parent: HPDF_Outline,
                              title: *const ::libc::c_char,
                              encoder: HPDF_Encoder) -> HPDF_Outline;
    pub fn HPDF_Outline_SetOpened(outline: HPDF_Outline, opened: HPDF_BOOL)
     -> HPDF_STATUS;
    pub fn HPDF_Outline_SetDestination(outline: HPDF_Outline,
                                       dst: HPDF_Destination) -> HPDF_STATUS;
    pub fn HPDF_Page_CreateDestination(page: HPDF_Page) -> HPDF_Destination;
    pub fn HPDF_Destination_SetXYZ(dst: HPDF_Destination, left: HPDF_REAL,
                                   top: HPDF_REAL, zoom: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFit(dst: HPDF_Destination) -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitH(dst: HPDF_Destination, top: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitV(dst: HPDF_Destination, left: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitR(dst: HPDF_Destination, left: HPDF_REAL,
                                    bottom: HPDF_REAL, right: HPDF_REAL,
                                    top: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitB(dst: HPDF_Destination) -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitBH(dst: HPDF_Destination, top: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitBV(dst: HPDF_Destination, left: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_GetEncoder(pdf: HPDF_Doc,
                           encoding_name: *const ::libc::c_char)
     -> HPDF_Encoder;
    pub fn HPDF_GetCurrentEncoder(pdf: HPDF_Doc) -> HPDF_Encoder;
    pub fn HPDF_SetCurrentEncoder(pdf: HPDF_Doc,
                                  encoding_name: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Encoder_GetType(encoder: HPDF_Encoder) -> HPDF_EncoderType;
    pub fn HPDF_Encoder_GetByteType(encoder: HPDF_Encoder,
                                    text: *const ::libc::c_char,
                                    index: HPDF_UINT) -> HPDF_ByteType;
    pub fn HPDF_Encoder_GetUnicode(encoder: HPDF_Encoder, code: HPDF_UINT16)
     -> HPDF_UNICODE;
    pub fn HPDF_Encoder_GetWritingMode(encoder: HPDF_Encoder)
     -> HPDF_WritingMode;
    pub fn HPDF_UseJPEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseKREncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseCNSEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseCNTEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseUTFEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_Page_CreateXObjectFromImage(pdf: HPDF_Doc, page: HPDF_Page,
                                            rect: HPDF_Rect,
                                            image: HPDF_Image,
                                            zoom: HPDF_Boolean)
     -> HPDF_XObject;
    pub fn HPDF_Page_CreateXObjectAsWhiteRect(pdf: HPDF_Doc, page: HPDF_Page,
                                              rect: HPDF_Rect)
     -> HPDF_XObject;
    pub fn HPDF_Page_Create3DAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                   tb: HPDF_BOOL, np: HPDF_BOOL,
                                   u3d: HPDF_U3D, ap: HPDF_Image)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateTextAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                     text: *const ::libc::c_char,
                                     encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateFreeTextAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                         text: *const ::libc::c_char,
                                         encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateLineAnnot(page: HPDF_Page,
                                     text: *const ::libc::c_char,
                                     encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateWidgetAnnot_WhiteOnlyWhilePrint(pdf: HPDF_Doc,
                                                           page: HPDF_Page,
                                                           rect: HPDF_Rect)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateWidgetAnnot(page: HPDF_Page, rect: HPDF_Rect)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateLinkAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                     dst: HPDF_Destination)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateURILinkAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                        uri: *const ::libc::c_char)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateTextMarkupAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                           text: *const ::libc::c_char,
                                           encoder: HPDF_Encoder,
                                           subType: HPDF_AnnotType)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateHighlightAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                          text: *const ::libc::c_char,
                                          encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateUnderlineAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                          text: *const ::libc::c_char,
                                          encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateSquigglyAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                         text: *const ::libc::c_char,
                                         encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateStrikeOutAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                          text: *const ::libc::c_char,
                                          encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreatePopupAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                      parent: HPDF_Annotation)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateStampAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                      name: HPDF_StampAnnotName,
                                      text: *const ::libc::c_char,
                                      encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateProjectionAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                           text: *const ::libc::c_char,
                                           encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateSquareAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                       text: *const ::libc::c_char,
                                       encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateCircleAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                       text: *const ::libc::c_char,
                                       encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_LinkAnnot_SetHighlightMode(annot: HPDF_Annotation,
                                           mode: HPDF_AnnotHighlightMode)
     -> HPDF_STATUS;
    pub fn HPDF_LinkAnnot_SetJavaScript(annot: HPDF_Annotation,
                                        javascript: HPDF_JavaScript)
     -> HPDF_STATUS;
    pub fn HPDF_LinkAnnot_SetBorderStyle(annot: HPDF_Annotation,
                                         width: HPDF_REAL,
                                         dash_on: HPDF_UINT16,
                                         dash_off: HPDF_UINT16)
     -> HPDF_STATUS;
    pub fn HPDF_TextAnnot_SetIcon(annot: HPDF_Annotation,
                                  icon: HPDF_AnnotIcon) -> HPDF_STATUS;
    pub fn HPDF_TextAnnot_SetOpened(annot: HPDF_Annotation, opened: HPDF_BOOL)
     -> HPDF_STATUS;
    pub fn HPDF_Annot_SetRGBColor(annot: HPDF_Annotation,
                                  color: HPDF_RGBColor) -> HPDF_STATUS;
    pub fn HPDF_Annot_SetCMYKColor(annot: HPDF_Annotation,
                                   color: HPDF_CMYKColor) -> HPDF_STATUS;
    pub fn HPDF_Annot_SetGrayColor(annot: HPDF_Annotation, color: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Annot_SetNoColor(annot: HPDF_Annotation) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetTitle(annot: HPDF_Annotation,
                                     name: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetSubject(annot: HPDF_Annotation,
                                       name: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetCreationDate(annot: HPDF_Annotation,
                                            value: HPDF_Date) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetTransparency(annot: HPDF_Annotation,
                                            value: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetIntent(annot: HPDF_Annotation,
                                      intent: HPDF_AnnotIntent)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetPopup(annot: HPDF_Annotation,
                                     popup: HPDF_Annotation) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetRectDiff(annot: HPDF_Annotation,
                                        rect: HPDF_Rect) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetCloudEffect(annot: HPDF_Annotation,
                                           cloudIntensity: HPDF_INT)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetInteriorRGBColor(annot: HPDF_Annotation,
                                                color: HPDF_RGBColor)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetInteriorCMYKColor(annot: HPDF_Annotation,
                                                 color: HPDF_CMYKColor)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetInteriorGrayColor(annot: HPDF_Annotation,
                                                 color: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetInteriorTransparent(annot: HPDF_Annotation)
     -> HPDF_STATUS;
    pub fn HPDF_TextMarkupAnnot_SetQuadPoints(annot: HPDF_Annotation,
                                              lb: HPDF_Point, rb: HPDF_Point,
                                              rt: HPDF_Point, lt: HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_Annot_Set3DView(mmgr: HPDF_MMgr, annot: HPDF_Annotation,
                                annot3d: HPDF_Annotation, view: HPDF_Dict)
     -> HPDF_STATUS;
    pub fn HPDF_PopupAnnot_SetOpened(annot: HPDF_Annotation,
                                     opened: HPDF_BOOL) -> HPDF_STATUS;
    pub fn HPDF_FreeTextAnnot_SetLineEndingStyle(annot: HPDF_Annotation,
                                                 startStyle:
                                                     HPDF_LineAnnotEndingStyle,
                                                 endStyle:
                                                     HPDF_LineAnnotEndingStyle)
     -> HPDF_STATUS;
    pub fn HPDF_FreeTextAnnot_Set3PointCalloutLine(annot: HPDF_Annotation,
                                                   startPoint: HPDF_Point,
                                                   kneePoint: HPDF_Point,
                                                   endPoint: HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_FreeTextAnnot_Set2PointCalloutLine(annot: HPDF_Annotation,
                                                   startPoint: HPDF_Point,
                                                   endPoint: HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_FreeTextAnnot_SetDefaultStyle(annot: HPDF_Annotation,
                                              style: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_LineAnnot_SetPosition(annot: HPDF_Annotation,
                                      startPoint: HPDF_Point,
                                      startStyle: HPDF_LineAnnotEndingStyle,
                                      endPoint: HPDF_Point,
                                      endStyle: HPDF_LineAnnotEndingStyle)
     -> HPDF_STATUS;
    pub fn HPDF_LineAnnot_SetLeader(annot: HPDF_Annotation,
                                    leaderLen: HPDF_INT,
                                    leaderExtLen: HPDF_INT,
                                    leaderOffsetLen: HPDF_INT) -> HPDF_STATUS;
    pub fn HPDF_LineAnnot_SetCaption(annot: HPDF_Annotation,
                                     showCaption: HPDF_BOOL,
                                     position: HPDF_LineAnnotCapPosition,
                                     horzOffset: HPDF_INT,
                                     vertOffset: HPDF_INT) -> HPDF_STATUS;
    pub fn HPDF_Annotation_SetBorderStyle(annot: HPDF_Annotation,
                                          subtype: HPDF_BSSubtype,
                                          width: HPDF_REAL,
                                          dash_on: HPDF_UINT16,
                                          dash_off: HPDF_UINT16,
                                          dash_phase: HPDF_UINT16)
     -> HPDF_STATUS;
    pub fn HPDF_ProjectionAnnot_SetExData(annot: HPDF_Annotation,
                                          exdata: HPDF_ExData) -> HPDF_STATUS;
    pub fn HPDF_Page_Create3DC3DMeasure(page: HPDF_Page,
                                        firstanchorpoint: HPDF_Point3D,
                                        textanchorpoint: HPDF_Point3D)
     -> HPDF_3DMeasure;
    pub fn HPDF_Page_CreatePD33DMeasure(page: HPDF_Page,
                                        annotationPlaneNormal: HPDF_Point3D,
                                        firstAnchorPoint: HPDF_Point3D,
                                        secondAnchorPoint: HPDF_Point3D,
                                        leaderLinesDirection: HPDF_Point3D,
                                        measurementValuePoint: HPDF_Point3D,
                                        textYDirection: HPDF_Point3D,
                                        value: HPDF_REAL,
                                        unitsString: *const ::libc::c_char)
     -> HPDF_3DMeasure;
    pub fn HPDF_3DMeasure_SetName(measure: HPDF_3DMeasure,
                                  name: *const ::libc::c_char) -> HPDF_STATUS;
    pub fn HPDF_3DMeasure_SetColor(measure: HPDF_3DMeasure,
                                   color: HPDF_RGBColor) -> HPDF_STATUS;
    pub fn HPDF_3DMeasure_SetTextSize(measure: HPDF_3DMeasure,
                                      textsize: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_3DC3DMeasure_SetTextBoxSize(measure: HPDF_3DMeasure,
                                            x: HPDF_INT32, y: HPDF_INT32)
     -> HPDF_STATUS;
    pub fn HPDF_3DC3DMeasure_SetText(measure: HPDF_3DMeasure,
                                     text: *const ::libc::c_char,
                                     encoder: HPDF_Encoder) -> HPDF_STATUS;
    pub fn HPDF_3DC3DMeasure_SetProjectionAnotation(measure: HPDF_3DMeasure,
                                                    projectionanotation:
                                                        HPDF_Annotation)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Create3DAnnotExData(page: HPDF_Page) -> HPDF_ExData;
    pub fn HPDF_3DAnnotExData_Set3DMeasurement(exdata: HPDF_ExData,
                                               measure: HPDF_3DMeasure)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Create3DView(page: HPDF_Page, u3d: HPDF_U3D,
                                  annot3d: HPDF_Annotation,
                                  name: *const ::libc::c_char) -> HPDF_Dict;
    pub fn HPDF_3DView_Add3DC3DMeasure(view: HPDF_Dict,
                                       measure: HPDF_3DMeasure)
     -> HPDF_STATUS;
    pub fn HPDF_LoadPngImageFromMem(pdf: HPDF_Doc, buffer: *const HPDF_BYTE,
                                    size: HPDF_UINT) -> HPDF_Image;
    pub fn HPDF_LoadPngImageFromFile(pdf: HPDF_Doc,
                                     filename: *const ::libc::c_char)
     -> HPDF_Image;
    pub fn HPDF_LoadPngImageFromFile2(pdf: HPDF_Doc,
                                      filename: *const ::libc::c_char)
     -> HPDF_Image;
    pub fn HPDF_LoadJpegImageFromFile(pdf: HPDF_Doc,
                                      filename: *const ::libc::c_char)
     -> HPDF_Image;
    pub fn HPDF_LoadJpegImageFromMem(pdf: HPDF_Doc, buffer: *const HPDF_BYTE,
                                     size: HPDF_UINT) -> HPDF_Image;
    pub fn HPDF_LoadU3DFromFile(pdf: HPDF_Doc,
                                filename: *const ::libc::c_char)
     -> HPDF_Image;
    pub fn HPDF_LoadU3DFromMem(pdf: HPDF_Doc, buffer: *const HPDF_BYTE,
                               size: HPDF_UINT) -> HPDF_Image;
    pub fn HPDF_Image_LoadRaw1BitImageFromMem(pdf: HPDF_Doc,
                                              buf: *const HPDF_BYTE,
                                              width: HPDF_UINT,
                                              height: HPDF_UINT,
                                              line_width: HPDF_UINT,
                                              black_is1: HPDF_BOOL,
                                              top_is_first: HPDF_BOOL)
     -> HPDF_Image;
    pub fn HPDF_LoadRawImageFromFile(pdf: HPDF_Doc,
                                     filename: *const ::libc::c_char,
                                     width: HPDF_UINT, height: HPDF_UINT,
                                     color_space: HPDF_ColorSpace)
     -> HPDF_Image;
    pub fn HPDF_LoadRawImageFromMem(pdf: HPDF_Doc, buf: *const HPDF_BYTE,
                                    width: HPDF_UINT, height: HPDF_UINT,
                                    color_space: HPDF_ColorSpace,
                                    bits_per_component: HPDF_UINT)
     -> HPDF_Image;
    pub fn HPDF_Image_AddSMask(image: HPDF_Image, smask: HPDF_Image)
     -> HPDF_STATUS;
    pub fn HPDF_Image_GetSize(image: HPDF_Image) -> HPDF_Point;
    pub fn HPDF_Image_GetSize2(image: HPDF_Image, size: *mut HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_Image_GetWidth(image: HPDF_Image) -> HPDF_UINT;
    pub fn HPDF_Image_GetHeight(image: HPDF_Image) -> HPDF_UINT;
    pub fn HPDF_Image_GetBitsPerComponent(image: HPDF_Image) -> HPDF_UINT;
    pub fn HPDF_Image_GetColorSpace(image: HPDF_Image)
     -> *const ::libc::c_char;
    pub fn HPDF_Image_SetColorMask(image: HPDF_Image, rmin: HPDF_UINT,
                                   rmax: HPDF_UINT, gmin: HPDF_UINT,
                                   gmax: HPDF_UINT, bmin: HPDF_UINT,
                                   bmax: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Image_SetMaskImage(image: HPDF_Image, mask_image: HPDF_Image)
     -> HPDF_STATUS;
    pub fn HPDF_SetInfoAttr(pdf: HPDF_Doc, _type: HPDF_InfoType,
                            value: *const ::libc::c_char) -> HPDF_STATUS;
    pub fn HPDF_GetInfoAttr(pdf: HPDF_Doc, _type: HPDF_InfoType)
     -> *const ::libc::c_char;
    pub fn HPDF_SetInfoDateAttr(pdf: HPDF_Doc, _type: HPDF_InfoType,
                                value: HPDF_Date) -> HPDF_STATUS;
    pub fn HPDF_SetPassword(pdf: HPDF_Doc,
                            owner_passwd: *const ::libc::c_char,
                            user_passwd: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_SetPermission(pdf: HPDF_Doc, permission: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_SetEncryptionMode(pdf: HPDF_Doc, mode: HPDF_EncryptMode,
                                  key_len: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_SetCompressionMode(pdf: HPDF_Doc, mode: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_Font_GetFontName(font: HPDF_Font) -> *const ::libc::c_char;
    pub fn HPDF_Font_GetEncodingName(font: HPDF_Font)
     -> *const ::libc::c_char;
    pub fn HPDF_Font_GetUnicodeWidth(font: HPDF_Font, code: HPDF_UNICODE)
     -> HPDF_INT;
    pub fn HPDF_Font_GetBBox(font: HPDF_Font) -> HPDF_Box;
    pub fn HPDF_Font_GetAscent(font: HPDF_Font) -> HPDF_INT;
    pub fn HPDF_Font_GetDescent(font: HPDF_Font) -> HPDF_INT;
    pub fn HPDF_Font_GetXHeight(font: HPDF_Font) -> HPDF_UINT;
    pub fn HPDF_Font_GetCapHeight(font: HPDF_Font) -> HPDF_UINT;
    pub fn HPDF_Font_TextWidth(font: HPDF_Font, text: *const HPDF_BYTE,
                               len: HPDF_UINT) -> HPDF_TextWidth;
    pub fn HPDF_Font_MeasureText(font: HPDF_Font, text: *const HPDF_BYTE,
                                 len: HPDF_UINT, width: HPDF_REAL,
                                 font_size: HPDF_REAL, char_space: HPDF_REAL,
                                 word_space: HPDF_REAL, wordwrap: HPDF_BOOL,
                                 real_width: *mut HPDF_REAL) -> HPDF_UINT;
    pub fn HPDF_AttachFile(pdf: HPDF_Doc, file: *const ::libc::c_char)
     -> HPDF_EmbeddedFile;
    pub fn HPDF_CreateExtGState(pdf: HPDF_Doc) -> HPDF_ExtGState;
    pub fn HPDF_ExtGState_SetAlphaStroke(ext_gstate: HPDF_ExtGState,
                                         value: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_ExtGState_SetAlphaFill(ext_gstate: HPDF_ExtGState,
                                       value: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_ExtGState_SetBlendMode(ext_gstate: HPDF_ExtGState,
                                       mode: HPDF_BlendMode) -> HPDF_STATUS;
    pub fn HPDF_Page_TextWidth(page: HPDF_Page, text: *const ::libc::c_char)
     -> HPDF_REAL;
    pub fn HPDF_Page_MeasureText(page: HPDF_Page, text: *const ::libc::c_char,
                                 width: HPDF_REAL, wordwrap: HPDF_BOOL,
                                 real_width: *mut HPDF_REAL) -> HPDF_UINT;
    pub fn HPDF_Page_GetWidth(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetHeight(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetGMode(page: HPDF_Page) -> HPDF_UINT16;
    pub fn HPDF_Page_GetCurrentPos(page: HPDF_Page) -> HPDF_Point;
    pub fn HPDF_Page_GetCurrentPos2(page: HPDF_Page, pos: *mut HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_Page_GetCurrentTextPos(page: HPDF_Page) -> HPDF_Point;
    pub fn HPDF_Page_GetCurrentTextPos2(page: HPDF_Page, pos: *mut HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_Page_GetCurrentFont(page: HPDF_Page) -> HPDF_Font;
    pub fn HPDF_Page_GetCurrentFontSize(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetTransMatrix(page: HPDF_Page) -> HPDF_TransMatrix;
    pub fn HPDF_Page_GetLineWidth(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetLineCap(page: HPDF_Page) -> HPDF_LineCap;
    pub fn HPDF_Page_GetLineJoin(page: HPDF_Page) -> HPDF_LineJoin;
    pub fn HPDF_Page_GetMiterLimit(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetDash(page: HPDF_Page) -> HPDF_DashMode;
    pub fn HPDF_Page_GetFlat(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetCharSpace(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetWordSpace(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetHorizontalScalling(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetTextLeading(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetTextRenderingMode(page: HPDF_Page)
     -> HPDF_TextRenderingMode;
    pub fn HPDF_Page_GetTextRaise(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetTextRise(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetRGBFill(page: HPDF_Page) -> HPDF_RGBColor;
    pub fn HPDF_Page_GetRGBStroke(page: HPDF_Page) -> HPDF_RGBColor;
    pub fn HPDF_Page_GetCMYKFill(page: HPDF_Page) -> HPDF_CMYKColor;
    pub fn HPDF_Page_GetCMYKStroke(page: HPDF_Page) -> HPDF_CMYKColor;
    pub fn HPDF_Page_GetGrayFill(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetGrayStroke(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetStrokingColorSpace(page: HPDF_Page)
     -> HPDF_ColorSpace;
    pub fn HPDF_Page_GetFillingColorSpace(page: HPDF_Page) -> HPDF_ColorSpace;
    pub fn HPDF_Page_GetTextMatrix(page: HPDF_Page) -> HPDF_TransMatrix;
    pub fn HPDF_Page_GetGStateDepth(page: HPDF_Page) -> HPDF_UINT;
    pub fn HPDF_Page_SetLineWidth(page: HPDF_Page, line_width: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetLineCap(page: HPDF_Page, line_cap: HPDF_LineCap)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetLineJoin(page: HPDF_Page, line_join: HPDF_LineJoin)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetMiterLimit(page: HPDF_Page, miter_limit: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetDash(page: HPDF_Page, dash_ptn: *const HPDF_UINT16,
                             num_param: HPDF_UINT, phase: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetFlat(page: HPDF_Page, flatness: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetExtGState(page: HPDF_Page, ext_gstate: HPDF_ExtGState)
     -> HPDF_STATUS;
    pub fn HPDF_Page_GSave(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_GRestore(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Concat(page: HPDF_Page, a: HPDF_REAL, b: HPDF_REAL,
                            c: HPDF_REAL, d: HPDF_REAL, x: HPDF_REAL,
                            y: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_MoveTo(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_LineTo(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_CurveTo(page: HPDF_Page, x1: HPDF_REAL, y1: HPDF_REAL,
                             x2: HPDF_REAL, y2: HPDF_REAL, x3: HPDF_REAL,
                             y3: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_CurveTo2(page: HPDF_Page, x2: HPDF_REAL, y2: HPDF_REAL,
                              x3: HPDF_REAL, y3: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_CurveTo3(page: HPDF_Page, x1: HPDF_REAL, y1: HPDF_REAL,
                              x3: HPDF_REAL, y3: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_ClosePath(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Rectangle(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL,
                               width: HPDF_REAL, height: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Stroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_ClosePathStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Fill(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Eofill(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_FillStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_EofillStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_ClosePathFillStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_ClosePathEofillStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_EndPath(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Clip(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Eoclip(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_BeginText(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_EndText(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_SetCharSpace(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetWordSpace(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetHorizontalScalling(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextLeading(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetFontAndSize(page: HPDF_Page, font: HPDF_Font,
                                    size: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextRenderingMode(page: HPDF_Page,
                                          mode: HPDF_TextRenderingMode)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextRise(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextRaise(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_MoveTextPos(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_MoveTextPos2(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextMatrix(page: HPDF_Page, a: HPDF_REAL,
                                   b: HPDF_REAL, c: HPDF_REAL, d: HPDF_REAL,
                                   x: HPDF_REAL, y: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_MoveToNextLine(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_ShowText(page: HPDF_Page, text: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Page_ShowTextNextLine(page: HPDF_Page,
                                      text: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Page_ShowTextNextLineEx(page: HPDF_Page,
                                        word_space: HPDF_REAL,
                                        char_space: HPDF_REAL,
                                        text: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetGrayFill(page: HPDF_Page, gray: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetGrayStroke(page: HPDF_Page, gray: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetRGBFill(page: HPDF_Page, r: HPDF_REAL, g: HPDF_REAL,
                                b: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_SetRGBStroke(page: HPDF_Page, r: HPDF_REAL, g: HPDF_REAL,
                                  b: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_SetCMYKFill(page: HPDF_Page, c: HPDF_REAL, m: HPDF_REAL,
                                 y: HPDF_REAL, k: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_SetCMYKStroke(page: HPDF_Page, c: HPDF_REAL,
                                   m: HPDF_REAL, y: HPDF_REAL, k: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_ExecuteXObject(page: HPDF_Page, obj: HPDF_XObject)
     -> HPDF_STATUS;
    pub fn HPDF_Page_New_Content_Stream(page: HPDF_Page,
                                        new_stream: *mut HPDF_Dict)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Insert_Shared_Content_Stream(page: HPDF_Page,
                                                  shared_stream: HPDF_Dict)
     -> HPDF_STATUS;
    pub fn HPDF_Page_DrawImage(page: HPDF_Page, image: HPDF_Image,
                               x: HPDF_REAL, y: HPDF_REAL, width: HPDF_REAL,
                               height: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_Circle(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL,
                            ray: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_Ellipse(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL,
                             xray: HPDF_REAL, yray: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_Arc(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL,
                         ray: HPDF_REAL, ang1: HPDF_REAL, ang2: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_TextOut(page: HPDF_Page, xpos: HPDF_REAL,
                             ypos: HPDF_REAL, text: *const ::libc::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Page_TextRect(page: HPDF_Page, left: HPDF_REAL,
                              top: HPDF_REAL, right: HPDF_REAL,
                              bottom: HPDF_REAL, text: *const ::libc::c_char,
                              align: HPDF_TextAlignment, len: *mut HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetSlideShow(page: HPDF_Page,
                                  _type: HPDF_TransitionStyle,
                                  disp_time: HPDF_REAL, trans_time: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_ICC_LoadIccFromMem(pdf: HPDF_Doc, mmgr: HPDF_MMgr,
                                   iccdata: HPDF_Stream, xref: HPDF_Xref,
                                   numcomponent: ::libc::c_int)
     -> HPDF_OutputIntent;
    pub fn HPDF_LoadIccProfileFromFile(pdf: HPDF_Doc,
                                       icc_file_name: *const ::libc::c_char,
                                       numcomponent: ::libc::c_int)
     -> HPDF_OutputIntent;
}
